 /* test ispf panel exit                         rexx */

 say 'ISPF panel exit ISPDPX01 installation verification'

 pnlpfx ='ISX1PNL'
 say 'Panel prefix' pnlpfx
 zz=Listdsi('sysexec file')
 plib=sysdsname
 env = left(sysvar('sysenv'),1)   /* Fore/Back */
 libdef=''
 address ispexec
 "control errors return"
 zerrlm=''
 "libdef ispplib dataset id('"plib"') stack"
 if rc<>0 then call close 8 'Libdef plib' plib 'failed rc' rc zerrlm
 libdef=libdef 'ISPPLIB'

 say ''
 say 'ISPDPX01 version='ISPDPX01('version')
 say ''

 say 'Test having everything in one stem'
 pl.1  = ")ATTR                          "
 pl.2  = " + type(text) color(green) skip(on)  "
 pl.3  = " _ type(input) color(turq) hilite(uscore) caps(on)"
 pl.4  = " ! type(input) color(turq) hilite(uscore) caps(off)"
 pl.5  = ")BODY expand(\\)               "
 pl.6  = center('%Test panel exit 1 - IVP 2',78)
 pl.7  = "%Cmd =>_zcmd    \ \ +"
 pl.8  = "+                              "
 pl.9  = "Just some text                 "
 pl.10 = "+"
 pl.11 = left("Input your name!name",60)"+"
 pl.12 = "+                              "
 pl.13 = ")INIT                          "
 pl.14 = " &name = 'test1'                "
 pl.15 = ")PROC                          "
 pl.16 = " ver (&name,nb)"
 pl.0 = 16
 Call DoTest pnlpfx'1',8

 say 'Test separate stems per panel section'
 /* ATTR */
 pa.1 = " + type(text) color(green) skip(on)  "
 pa.2 = " _ type(input) color(turq) hilite(uscore) caps(on)"
 pa.3 = " ! type(input) color(turq) hilite(uscore) caps(off)"
 pa.0 = 3
 /* BODY */
 pb.1 = center('%Test panel exit 1 - IVP 2',78)
 pb.2 = left("%Cmd =>_zcmd",78)"+"
 pb.3 = "+                              "
 pb.4 = "Just some text                 "
 pb.5 = "+"
 pb.6 = left("Input your name!name",60)"+"
 pb.7 = "+                              "
 pb.0 = 7
 /* INIT */
 pi.1 = " &name = 'test2'                "
 pi.0 = 1
 /* REINIT */
 pr.0 = 0
 /* PROC */
 pp.1 = " ver (&name,nb)"
 pp.0 = 1
 Call DoTest pnlpfx'2',8

 say 'Test indirect panel stem variable with long names'
 testp005.1 = ")ATTR                     "
 testp005.2 = " + type(text) color(green) skip(on) "
 testp005.3 = " _ type(input) color(turq) hilite(uscore) caps(on)"
 testp005.4 = " ! type(input) color(turq) hilite(uscore) caps(off)"
 testp005.5 = ")BODY expand(\\)          "
 testp005.6 = "%\ \Test panel exit 1 - IVP 004\ \+"
 testp005.7 = "%Cmd =>_zcmd \ \ +"
 testp005.8 = "+                         "
 testp005.9 = "+Just some text           "
 testp005.10 = "+"
 testp005.11 = left("+Input your name!name",60)"+"
 testp005.12 = "+                        "
 testp005.13 = ")INIT                    "
 testp005.14 = " &name = 'test1'          "
 testp005.15 = ")PROC                    "
 testp005.16 = " ver (&name,nb)"
 testp005.0 = 16
 do n=1 to testp005.0 *0
   say testp005.n
 end
 ISX1pnlstem='TestP005.' /* set indirect reference */
 Call DoTest pnlpfx'5',8

 say 'Testing copy stack to stem'
 address tso "delstack"
 queue 'Kilroy'
 queue ' was'
 queue '  here'
 say 'queued #='queued()
 cc=ISPDPX01('q2s kilroy.')
 address tso "delstack"
 say 'Q2S rc="'cc'"'
 if cc<>0 | kilroy.0<>3 then call close 8,
   'Bad rc' cc 'or bad stem kilroy.0 "'kilroy.0'" (should be 3)'
 else do
   say 'kilroy stem'
   do n=0 to kilroy.0
     say 'kilroy.'n'='kilroy.n
   end
 end

 call close 0 'All ok'

DoTest: /* panelid, maxrc */
 arg dtpnl,dtmaxrc
 Signal on Error name DoTestE
 Signal on Syntax name DoTestS
 zerrlm=''
 if enf='B' then "control nondispl enter"
 "Display panel("dtpnl")"
 Return DoTestRc()
DoTestRc:
 say 'Display' dtpnl 'rc' rc zerrlm
 if rc>dtmaxrc then call Close 8 'rc' rc 'gt maxrc' dtmaxrc
 say ''
 return 0
DoTestE: Return DoTestRc()
DoTestS: Return DoTestRc()

Close:
 parse arg n m
 if m<>'' then say m
 do dn=1 to words(libdef)
   "libdef" word(libdef,dn)
 end
 exit word(n 0,1)
