//RXRP005   JOB (1),'RXRDPRML-005',
//*  RESTART=IVP1,
//          CLASS=A,REGION=32M,COND=(0,LT)
//*
//* ?1 Read parmlib member, return in stem : e
//*
//   SET IVP=IVP1
//*
//A         EXEC ASMACL, XL,MACLIST=RXRDPRML,
//          PARM.C='TERM',PARM.L='LIST,MAP,XREF,RMODE(ANY)'
//C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//          DD DISP=SHR,DSN=CBT669.PP.RXRDPRML.LIB
//C.SYSTERM DD SYSOUT=*
//C.SYSIN   DD *
*Process compat(macrocase)
*
* Build 005
*
* Read parmlib member, return in stem
* Parameters are positional
*   mbrname,opt1,opt2,stemname,records,trace
*   opt1      'XC1' exclude comments = '*' in col1
*             'XC2' exclude comments = '/*' in col1-2
*   opt2      'Y'   retain blank lines (default)
*             'N'   ignore blank lines
*   stemname  Must inclusd trailing dot, Default is 'PARMREC.'
*   records   Max number of records, default is 500.
*             Program will redrive the load if the value is too
*             small - but you will see 2 IEE252I messages.
*   trace     'Y'   create trace info (REXX SAY)
*             'N'   do not create trace info. Default.
*
*  Sample: cc=RXRDPRML('IEASYSX0','xc1','n','parmlib.','20')
*
*  Return
*    0   ok
*   >0   not ok, variable RXRDPRML_ERRMSG contains the reason
*
* New/changed in this build
*  Minor fixes
*
* Contact info
*  email   willy@harders-jensen.com
*  web     https://harders-jensen.com  (newest version here)
*

         lclc  &name,&build
&name    setc  'RXRDPRML'
&build   setc  '005'

         print off
         COPY  WSAMMACS
         Copy  REXXMACS
         Copy  SYSMACS
*        Copy  z10macs
         print on
*- say
         Macro
         Say   &text,&len=
         aif   (k'&text eq 0).defl
         mvlit logr,&text,lr=r0
         ago   .doit
.defl    $la   r0,&len,&syslist(2),l'logr
.doit    RxSay logr,(0)
         clear logr
         Mend
*- trace
         Macro
         XTrace &text,&len=
         if    (cli,trace,eq,c'Y')
         Say   &text,len=&len
         endif
         Mend

*-
* start module
*-
RXRDPRML #module amode=31,rmode=any,base=(r11,r12),sa=sa1,             c
               text='&build',epilog=epilog
         sr    r10,r10

* positional parms: mbrname,opt1,opt2,stemname,records,trace
         RxInit parmlist=((mbrname,8),(opt1,4),(opt2,4),(stemname,40), c
               (records,4),(trace,1))
         oc    trace,blank

         if    (cli,trace,eq,c'Y')
           strmake logr,'Version ','&name &build',lenreg=r2
           rxsay logr,(r2)
           clear logr
         endif

         if    (cli,stemname,eq,c' ')
           mvi   stemname_ds,8
           mvc   stemname(8),=cl8'PARMREC.'
         endif
         oc    stemname,blank
*-
         if    (cli,trace,eq,c'Y')
           StrMake logr,'mbrname  ',lenreg=r2,                         c
               (mbrname_ds,1,cvd,3),+1,(mbrname,b.mbrname_ds)
           rxsay logr,(r2)
           StrMake logr,'stembase ',lenreg=r2,                         c
               (stemname_ds,1,cvd,3),+1,(stemname,b.stemname_ds)
           rxsay logr,(r2)
           clear logr
         endif

* preset stem.0 to '0'
         RxStemPut stema=varname,base=(stemname,b.stemname_ds),        c
               num=0,data='0',namelenr=r2
         if    (ltr,r5,r15,nz)
           strmake reason,'stemput ',(varname,(r2)),' rc ',            c
               (r5,,cvdr,4),lenreg=r3
           st    r3,reasonl
           if    (cli,trace,eq,c'Y')
             rxsay reason,(r3)
           endif
           #module exit,rc=8
         endif

         if    (cli,mbrname,eq,c' ')
           mvc   rc,=a(1)
           mvlit reason,'Missing name',lr=r3
           st    r3,reasonl
           if    (cli,trace,eq,c'Y')
             rxsay reason,(r3)
           endif
           #module exit
         endif

         oc    mbrname,blank
         oc    opt1,blank
         oc    opt2,blank

*-
*
* Read named parmlib member into a buffer, size is either in the
* 4th parm, or 500.
*
*-

         if    (cli,records,eq,c' ')
           mvi   records_ds,3
           mvc   records(3),=cl3'500'
         endif

         lb    r15,records_ds
         bctr  r15,0
         j     *+10
         pack  dw,records(*-*)
         ex    r15,*-6
         cvb   r15,dw                     # records
         st    r15,recnum
         mhi   r15,80                     80 = record length
         la    r15,PRM_RECORDS-PRM_READ_BUFFER(,r15)
         st    r15,bufsize

         if    (cli,trace,eq,c'Y')
           StrMake logr,'records ',(records,b.records_ds),lenreg=r2,   c
               ' recnum ',(recnum,4,cvd,4),' bufsz ',(bufsize,4,cvd,6)
           rxsay logr,(r2)
         endif

*-
* compute buffer size, get buffer
* fields of interest:
*   PRM_MSG_BUFFER_SIZE 1F Input - Size of buffer including header
*   PRM_MESSAGE_COUNT   1F Output - number of messages in the buffer
*-

         using PRM_READ_BUFFER,r10        map buffer
         do forever
           l     r4,bufsize
           Getmain R,lv=(4)
           lr    r10,r1
           st    r4,PRM_READ_BUFF_SIZE

           IEFPRMLB REQUEST=ALLOCATE,ALLOCDDNAME=ddname,BLANK72=YES,   +
               CALLERNAME=callname,MEMNAME=mbrname,MOUNT=NO,           +
               READ=YES,READBUF=(10),RETMSG=NO,S99RB=NO,WAITDSN=NO,    +
               RETCODE=prrc,RSNCODE=prrs,FREECLOSE=YES
           if    (clc,prrc,ne,zero)
             mvc   fw,prrc+3
             mvc   fw+1,prrs+3
             if     (=x'0C01',eq,fw)
               mvlit reason,'member not found',lr=r1
               st    r1,reasonl
             elseif (=x'0C0A',eq,fw)
               l     r4,PRM_BUFF_SIZE_NEEDED
               st    r4,bufsize
               if    (cli,trace,eq,c'Y')
                 strmake logr,'bfrsz reqd ',(r4,,cvdr,6),lenreg=r3
                 rxsay  logr,(r3)
                 clear  logr
               endif
               l     r2,PRM_READ_BUFF_SIZE
               Freemain R,lv=(2),a=(10)
               sr    r10,r10
               iterate
             else
               strmake reason,'allocate rc ',lenreg=r3,                c
               (prrc+3,1,c2x),' rs ',(prrs+3,1,c2x)
               st    r3,reasonl
             endif
             if    (cli,trace,eq,c'Y')
               rxsay reason,(r3)
             endif
             mvc   rc,=a(8)
             #module exit
           else
             xtrace 'alloc done'
           endif
           leave
         enddo

*-
*
* Copy records to stem
*
*-

         if    (icm,r6,15,PRM_TOTAL_RECORDS,z)  member record count
           mvlit reason,'Null member'
           mvc   reasonl,=a(11)
           if    (cli,trace,eq,c'Y')
             rxsay reason,(r3)
           endif
           mvc   rc,=a(8)
           #module exit                         is zero
         endif
         sr    r5,r5                 output count
         la    r7,PRM_RECORDS        -> 1st record

         do    over(r6)
* drop comments and blanks is requested
           if     (clc,=c'XC1',eq,opt1),and,(cli,0(r7),eq,c'*')
           elseif (clc,=c'XC2',eq,opt1),and,(clc,=c'/*',eq,0(r7))
           elseif (clc,=c'XC2',eq,opt1),and,(clc,=c'/*',eq,1(r7))
           elseif (clc,=c'N',eq,opt2),and,(clc,0(72,r7),eq,blank)
           else
             la    r5,1(,r5)          counter
             RxStemPut  stema=varname,                                 c
               base=(stemname,b.stemname_ds),num=(r5),data=((r7),71)
             if    (ltr,r2,r15,nz)
               strmake logr,'VPUT rc ',(r2,,cvdr,4),lenreg=r3
               st    r3,logrl
               mvc   rc,=a(3)
               if    (cli,trace,eq,c'Y')
                 rxsay logr,(r3)
               endif
               leave
             endif
           endif
           la    r7,80(,r7)            bump data pointer
         enddo

         $cvd  r5,fw,len=4             save count
         RxStemPut  stema=varname,                                     c
               base=(stemname,b.stemname_ds),num=0,data=fw

         #module exit

*-
*
* Backend
*
*-

Epilog   #subr label
         if    (ltr,r10,r10,nz)           got a buffer
           l     r2,PRM_READ_BUFF_SIZE
           Freemain R,lv=(2),a=(10)
         endif

         if    (icm,r5,15,reasonl,nz)
           la    r4,reason
         else
           la    r4,=c' '
           la    r5,1
         endif
         RxVput name='RXRDPRML_ERRMSG',data=((r4),(r5))

         l     r15,rc
         $cvd  r15,dw,len=8
         if    (cli,trace,eq,c'Y')
           strmake logr,'rc ',dw,lenreg=r3
           rxsay logr,(r3)
           clear logr
         endif

         RxRetval dw,8
         #subr exit,rc=0

*-
*
* Data
*
*-

zero     dc    a(0)
blank    dc    cl100' '
         ds    0a
logrl    dc    a(0)
logr     dc    cl100' '
reasonl  dc    a(0)
reason   dc    cl100' '
sa1      ds    18f
sa2      ds    18f
dw       ds    d
fw       ds    f
rc       dc    a(0)
recnum   dc    a(0)
bufsize  dc    a(0)

Callname dc    cl16'&name..&build'
DDname   dc    cl8' '
prrc     dc    a(0)
prrs     dc    a(0)
varnamel dc    a(0)
varname  dc    cl120' '

         RexxMacs ds

         ltorg

         Dsect
         RexxMacs dsect
         IEZVX100 ,                   message dsect
         IEFZPMAP ,                   iefprmlb buffer mapping
         IEFZPRC  ,                   iefprmlb completion codes

         End
//*
//* prod version goes to linklib
//L.SYSLMOD DD DSN=CBT669.LINKLIB(RXRDPRML),DISP=SHR
//*
//IVP1     EXEC PGM=IKJEFT1B,PARM='RXRP&IVP'
//STEPLIB  DD DISP=SHR,DSN=CBT669.LINKLIB
//SYSEXEC  DD DISP=SHR,DSN=CBT669.PP.RXRDPRML.LIB
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DUMMY
