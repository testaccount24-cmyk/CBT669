*-
* macros for RXVSAMBA
* latest update for build 015
*-

         Macro
         ICall &n
         l     r15,=a(&n)
         balr  r14,r15
         ltr   r15,r15
         Mend

         Macro
         @NZ   &nz
         gblc  &iexit
         aif   (k'&nz eq 0).x
&unz     setc  Upper('&nz')
         aif   ('&unz' eq 'EXIT').exit
         aif   ('&unz' eq 'LEAVE').leave
         mnote 8,'Invalid nz: &nz '
         mexit
.exit    mnote *,'------------- @nz begin           --------------'
         if    (nz)
           #subr exit,rc=8
         endif
         mexit
.leave   mnote *,'@nz -> leave'
         if    (nz),then=leave
.x       anop
         mnote *,'------------- @nz end             --------------'
         Mend

         Macro
         VSAM  &what,&nz=
         lclc  &uw,&unz
&uw      setc  Upper('&what')
&unz     setc  Upper('&nz')
         aif   ('&what' eq 'STAT').byname
         lr    r0,r15
.byname  l     r15,=V(VSAM&uw)
         balr  r14,r15
         ltr   r15,r15
         @NZ   &nz
.x       Mend

         Macro
         Countup &f,&value=1
         ap    &f,=p'&value'
         Mend

         Macro
         TestText
*        TestText begin
         la    r1,1                    default=ok
         if    (cli,text_dl,ne,0)
.*         if    (cli,trace,eq,c'Y'),then=(log,'testtext')
.* compute endpos, test for short record
           if    (icm,r15,15,endpos,nz)
             la    r15,1(,r15)         compute
             s     r15,pos               length
           else
             l     r15,vsbfr1dl        use record length
           endif
           sr    r14,r14
           ic    r14,text_dl
           a     r14,pos
           sr    r1,r1                 default = bad length = not ok
           if    (cr,r14,le,r15)       record length ok
             l     r14,pos
             la    r14,vsbfr1-1(r14)
.*           if    (cli,trace,eq,c'Y')
.*             stm   r2,r3,dw
.*             stm   r14,r15,dw2
.*             lr    r2,r14
.*             lr    r3,r15
.*             StrMake logr,'data "',((r2),(r3)),'"'
.*             log   ,
.*             lm    r2,r3,dw
.*             lm    r14,r15,dw2
.*           endif
*            strpos begin
             StrPos (text,b.text_dl),((r14),(r15))
*            strpos end
.*         else
.*           if    (cli,trace,eq,c'Y'),then=(log,'shortrec')
           endif
         endif
.*
.*       if    (cli,trace,eq,c'Y')
.*         if    (ltr,r2,r1,nz)
.*           log   'ok'
.*         else
.*           log   'nok'
.*         endif
.*         lr    r1,r2
.*       endif
*        TestText end
         Mend

         Macro
         SetRc &n
         $la   r0,&n
         st    r0,rc
         Mend

         Macro
         XTrace &t,&lr=,&l=
         lclc  &cl,&lbl
&cl      setc  '&l'
&lbl     setc  'TR&sysndx'
         lcla  &n
         cli   trace,c'Y'
         jne   &lbl.x
         aif   (k'&t eq 0).go
         mvlit logr,&t,lr=r0
&cl      setc  '(r0)'
.go      aif   (k'&cl gt 0).say
&cl      setc  'l''logr'
.say     RxSay logr,&cl
         clear logr
&lbl.x   equ   *
         Mend

*- errmsg
         Macro
.* t   text in quotes
.* c   return code, set in field RC
.* p   'T'  copy to log field, run TRCLOG macro
         SetErr &t,&c,&p
         lcla  &l
&l       seta  k'&t-2
         mvc   errmsg(&l),=c&t
         mvc   errmsgl,=a(&l)
         aif   (k'&c eq 0).x
         mvc   rc,=a(&c)
         aif   ('&p' ne 'T' and '&p' ne 't').x
         mvc   logr,errmsg
         xtrace l=&l
.x       Mend
