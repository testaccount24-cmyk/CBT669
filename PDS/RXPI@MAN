RXPIPE - Emulate the PIPE command using REXX facilities

 Current build: 008

RXPIPE is written by

  Willy Jensen mail: willy@harders-jensen.com web :
  http://harders-jensen.com

 Questions and comments should be sent to the email address,
 enhancement requests are especially welcome.


Disclaimer

 The product is totally freeware and can be distributed and modified
 as you like, though the author would like to know of enhancements
 made, so that they might be incooporated into the base product.

 The author accepts no responsibility for any damage caused by the
 product not behaving as expected or as documented. It is after all
 free.

 Questions and comments should be sent to the email address,
 enhancement requests are especially welcome.

 If you experience problems then check the website for an updated
 version (future, not there yet).


General information

 RXPIPE is not a replacement for the IBMs PIPE command, rather it is
 an attempt to implement what I find the most useful elements of the
 PIPE command in a small TSO/REXX based package.

 RXPIPE executes a series of commands, called stages, passing the
 output of each stage as input to the next, through the TSO stack. In
 this it works similar to a MSDOS pipe. RXPIPE has a number of
 built-in transformers that manipulates the contents of the stack. The
 stage separator is by default the vertical bar (|). This might a
 problem in some cases, i.e. when using an REXX expression with
 boolean OR. In such cases you can put an escape character before the
 vertical bar, see the next section for details.

 Any command and program can be part of a stage, as input and output
 can be the stack (preferred) or input can be a dataset generated by a
 previous stage, output written to a dataset can be read by a
 succeeding stage, and parameters for a program can be generated by a
 previous stage. Ok, WTOs and TPUTS cannot be trapped, but that is a
 TSO restriction.

 Sometimes you might need to pass a special character, i.e. the
 vertical bar, to a command. In such cases you can put the escape
 character, by default the backslash (\), before the special
 character. The backslash is dropped and the special character is
 passed on to the command.

 Hexadecimal characters x'02' to x'09' are used internally to assist
 in string parsing, so cannot be part of a command.

 Some of the commands names can be abbreviated, sub-commands typically
 cannot. The required part of the command name is shown with capital
 letters. Command names are not case sensitive.

 Command operands and expressions are case sensitive unless otherwise
 stated for the command.

 Some of the commands are similar to the IBM PIPE commands, though may
 have a different name.

 The callers stack may be used as input and the final stack may be
 written back to the callers stack.

 The stack is listed by default at the end of RXPIPE processing,
 unless changed by using the QUIT command, or by having the pipe char
 alone at the end. If the last command is LIST, the stack is not
 listed twice.

 RXPIPE executes with TSO PROFILE NOPREFIX, so datasets must be fully
 qualified - quotes are then optional.

 Negative return codes, and return codes ge 900 will cause an abort
 with the stack cleared. Other return codes are subject to the
 $HALTONRC variable. Return codes can be tested using the IF command.

 Variables are accepted in commands. A variable is a name starting
 with an ampersand (&) and terminating in something which is not a
 character or a number. Lone ampersands are ignored as they could be
 the AND operand in an expression. You can set variables by the SET
 command, or use the built-in variables. An unassigned variable sets a
 null value.

 RXPIPE is built with focus on funtionality, not so much on
 performance. It is expected, as time goes by, that commands will be
 reviewed and optimized.

 Most TSO commands can be used directly, unless their name conflicts
 with an internal command. So far I am only aware of 'CALL' doing
 that. In such case you can use the specific 'TSO command' command.

Built-in variables

  $DATE      Todays date in expanded european format yyyy-mm-dd.
  $HALTONRC  If set, then halt if $rc is ge the value. Set the value
             using the SET command, i.e. SET $HALTONRC = 8. Default is
             not set.
  $JOBNAME   The jobname/TSOid RXPIPE is running in.
  $LASTDD    Latest DD name genereted by allocation.
  $LASTDS    Latest Dataset name genereted by allocation.
  $MSGLVL    Show commands and their result if $MSGLVL is set gt 0.
  $RC        Latest numeric return value.
  $RESULT    Latest return value, if any.
  $TIME      Time in 24-hour format with seconds hh:mm:ss.
  $USER      Userid
  $USERPFX   The TSO PROFILE PREFIX value.
  JOBNAME    Same as $JOBNAME
  MCATNAME   Mastercatalog name
  MCATVOL    Mastercatalog volser
  ME         Same as $USER
  R          The current stack record for some commands.
  USER       Same as $USER
  USERPFX    Same as $USERPFX
  W1-W20     Word 1 to 20 of the record for some commands.


Installing RXPIPE

 See the Users Guide in member RXPI@USG.


Running RXPIPE

 RXPIPE can run as a function, or called. If called, you can still
 process the return value through the RESULT variable. See the QUIT
 sub-command for details.

 if the command list begins with a '-' then the first word is an
 option string, see 'Options string' later.

 if the command list begins with the separator then the callers stack
 is used.

 if the command list ends with the separator then the callers stack is
 replaced.


Getting started

 See the RXPIDEMO member for a couple of examples. They are packaged
 to run in batch job member RXPIDEM$, but will run equally fine from
 ISPF 6 or TSO READY, though you must set the DEMOLIB variable at the
 top before you do.


Process types

  Input      Get data onto the stack, i.e. READ. Unless otherwise
             noted these commands appends elements to the stack.
  Output     Write data from the stack, i.e. WRITE. Unless otherwise
             noted these commands empties the stack.
  Filter     Filter the stack, i.e. FILTER and LOCATE. These commands
             modifies the stack.
  Transform  Change the contents of the stack, i.e. BUILD and SPLIT.
             These commands modifies the stack entries.
  Info       List the contents of the stack, or provides info about
             the stack, i.e. LIST and QSTACK. These commands do not
             modify the stack.
  External   Do whatever it is that they do. They may modify the
             stack.

  Note that RXPIPE executes with PROFILE NOPREFIX, so datasetnames
  must be fully qualified, and should be un-quoted. However, the
  standard input and output processes accepts a dot at the front of a
  datasetname, the userid is then added at the front. The userid is
  not neccessarily the same as your prefix value. If RXPIPE aborts
  then the prefix may not be restored.


Return code handling

 Return values are not tested by RXPIPE. Instead you can use the IF
 command to test the $RC variable and act upon its value. You can set
 the $XRC variable to the code that RPIPE will end with.


Error handling and syntax checking

 Is somewhat rudimentary. Some checking is done, but it is mostly left
 to REXX ON SYNTAX handling. For instance, if you forget a separator
 you will most likely get a 'Novalue raised' error.


Built-in commands general information

 When you see 'BUILDREC done' it means that the stack record has been
 parsed into variables R containing the original record, and W1-W20
 containing descrete words 1-20.

 A couple of the commands actually calls an external function.


Built-in commands overview

 <          Short for READ or LOAD.
 >          Short for WRITE or SAVE.
 >>         Short for WRITE APPEND.
 |          When first it means that the callers stack is read to the
            internal stack. When last it means that the internal stack
            is written to the callers stack.
 ASK        Text to terminal, then get response to variable.
 ALLOC      Allocate existing dataset / create and allocate new
            dataset
 BUILD      Reformat records using REXX statements
 CALC       Calculate expression.
 CALL       Call a REXX function.
 CATSearch  Get ICF catalog info.
 CHOP       Leave left n bytes, or before 'text'.
 CLear      Empty the stack
 CLIP       Save or load semi-permanent data store.
 COLS       Generate a columns line.
 COMBine    Combine records by number, text or width
 COMPARE    Compare the stack to a stream.
 COMPRESS   Compress (remove multiple blanks) all entries in stack
 CONCAT     Concatenate DDname.
 COUNT      Count number of lines or words in the stack
 DELSTACK   Delete the stack (TSO DELSTACK command)
 DROP       Drop block of records by numbers and/or text
 DSINFO     Add dataset information using current stack as input
 DSNList    Get dataset list, optionally with some information (ISPF)
 DUP        Replicate lines
 DUPSTACK   Replicate stack
 EDIT       Edit dataset using stack as ISPF edit macro.
 EFFECT     Apply some effect
 ELSE       Swap condition for conditional block. See the WHEN command
 END        Ends conditional block. See the WHEN command
 EXCLUDE    Drop records with text or mask.
 FANIN      Load multiple internal streams by criteria.
 FANOUT     Filter and save stack to multiple internal streams.
 FIlter     Filter the stack by expression
 FOREACH    Do command for each stack record.
 FREE       Free ddname
 GETCONS    Pull text from the terminal to a variable.
 HEAD       Leave only top n lines See also the TAIL command
 IF         Execute conditional command or block.
 INCLUDE    Retain records with text or mask.
 ISPF       Run ISPF command
 JOIN       Join stream to stack
 JUST       Justify line, insert chars to fit width
 KEEP       Keep block of records by numbers and/or text
 List       List the stack
 LITeral    Insert text, Alias of TEXT.
 LOAD       Load internal stream(s) to stack
 MBRList    Make list of members in a pds
 NEWSTACK   Add new stack (TSO NEWSTACK command)
 NDUP       Drop all duplicate lines
 NDUPLINE   Drop if previous line is duplicate
 NLOCate    Leave records not with text
 ORDER      Reorder LIFO
 PAD        Pad records
 PAUSE      Wait for timer or keypress
 PDSMBRL    Make list of members in a pds, if PDS86 is installed.
 PROGRAM    Execute external program
 QUIT       Terminate RXPIPE
 REad       Read dataset to stack (append) by name or libref
 REPLace    Replace a string with another.
 REXX       Execute immediate REXX statement(s) or the stack.
 SAVE       Save stack to internal stream.
 SAY        Show text on terminal.
 SDSF       SDSF info or issue system command.
 SET        Set variable from text or stack.
 SHIFT      Shift records right or left, padding with char
 SORT       Simple sort using external quicksort command RXPIQSOR
 SPLIT      Split records into multiple records by argument
 STAT       Get status for the stack
 STEM       Copy stack to stem, copy stem to stack.
 STRIP      Strip leading and/or trailing characters
 SUBMIT     Write stack to internal reader
 TABLE      Make horizontal or vertical table from stack words
 TAIL       Take bottom n lines, replace the stack
 TERMinal   Write stack to terminal.
 TEXT       Insert text, Same as the LITERAL command in PIPE.
 TSO        Run TSO command, add response to the stack
 TSONS      Run TSO command, do not add response to the stack
 USORT      Sort using UNIX System Services (internal)
 VERsion    Return version info, must by the only command.
 USS        Run Unix System Services shell commnd
 VSAM       Read or write a VSAM KSDS.
 VTABLE     Short for 'TABLE V'
 WRite      Write stack to dataset by name or libref
 XLATE      Translate data in records


Supported REXX TSO/E External functions

 The TSO/E external functions LISTDSI, MVSVAR, STORAGE, SYSCPUS,
 SYSDSN and SYSVAR can be used as RXPIPE commands. See the TSO/E REXX
 Reference manual for details about the commands. Any variables that
 they set can be used in following RXPIPE stages if prefixed by an
 ampersand, i.e. &SYSDSNAME after LISTDSI. You can also use the SET
 command to set a variable to the result of an TSO/E external
 functions, i.e. SET opsys=mvsvar('SYSOPSYS').

Built-in commands descriptions

 < dsn      Short for READ, see the READ command. It is recommended
            that you use the READ command.

 < n        When n is a number then the command is a short form of
            LOAD n.

 > dsn      Short for WRITE, see the WRITE command. It is recommended
            that you use the WRITE command.
 >> dsn     Short for WRITE APPEND, see the WRITE command. It is
            recommended that you use the WRITE command.

 > n        When n is a number then the command is a short form of
            SAVE n CLEAR.

 command
   Run TSO command, add response to the stack if the command allows
   trapping of the response. The return value is stored in variable
   $RESULT and also in variable $RC if numeric. The command runs with
   PROFILE NOPREFIX. See the CALL command for executing REXX functions
   and commands.
  Syntax  command paramteers

 ALLOC
   Allocate existing dataset / create and allocate new dataset
  Syntax  ALLOC Ýdsname | TEMP | DUMMY | INTRDR ¨ wdynparms ÝCOND¨
                ÝSTDSYSIN¨ ÝSTDSYSPRINT¨
   dsname        Datasetname. If a datasetname is not specified, then
                 a temporary dataset is created. May also be a USS
                 filename if it contains a slash (i.e.
                 /u/HERMANN/t/text2.txt).
   wdynparms     Any and all BPXWDYN parameters required for
                 allocating the dataset. Default disposition is SHR
                 for an existing non-temporary dataset, CATALOG for a
                 new permanent dataset, NEW,DELETE for a new temporary
                 If new dataset and SPACE is not specified then the
                 allocation parameters are generated from stack
                 information.
   COND          Allocate with disp=SHR for an existing datasets,
                 otherwise create a new dataset. See the NEW parameter
                 for more details.
   DUMMY         Allocate a null file.
   INTRDR        Allocate the internal reader.
   TEMP          Create a temporary disk dataset.
   NEW           If NEW is the only parameter then an automatic
                 creation is done. If all records in the stack is of
                 the same length, then a fixed format dataset is
                 created, otherwise a variable format dataset is
                 created. For a variable format dataset the record
                 length is set to the higher of max stack reclen and
                 27994, up to a maximum of 32752. A stack max reclen
                 larger than 32752 will cause an abort.
   STDSYSIN      Use options FB/80 tracks 1,1 for new dataset.
   STDSYSPRINT   Use options FB/80 tracks 4,4 for new dataset.
  Notes          The datasetname is returned in the $LASTDS variable,
                 the DD name in $LASTDD. Samples
   existing      alloc &$user..lib.data dd(dd1)
   new-temp      alloc dd(sysipt) stdsysin reuse
   dummy         alloc dummy dd(sysin)
   all-parms     alloc &$user..RXPIPE.TEST.DS new catalog lrecl(256)
                 recfm(v,b) blksize(0) tracks space(1,1) unit(sysda)

 ASK
   Text to terminal, then pull response to a variable.
  Syntax  ASK Ýtext¨ ÝVAR name¨ ÝUNTIL test¨
    text         Optional prompt text.
    name         Variable name o receive respons. Default name is
                 $ASK.
    test         REXX expression to evaluate response, if evaluation
                 fails then the prompt is issued again. Use 'notnull'
                 to test for a not null response.
  Sample
    ASK Enter name var n1 until notnull | text Name is: &n1 atbot

 Build
   Reformat records using REXX statements. BUILDREC is used to pull
   and format stack entries. Numeric values I, N, M and P are set to 0
   prior to execution. Sets variable RECNUM to the current record
   number.
  Syntax  BUILD rexx-expr
    rexx-expr    A INTERPRETable statement.
  Samples
   Blanks at front then add labels before values
    BUILD copies(' ',4) 'name='w1', addr='w2
   4-byte number at front
    BUILD right(recnum*10,4,0) r
   wave effect (see also the EFFECT command)
    BUILD copies(' ',i)r;i=i+1;if i>6 then i=0

 CALC
   Calculate expression. Result is subject to the REXX NUMERIC VALUE
   setting. Decimal point is the dot. If you only want to display the
   result of a calculation, then you can use the command 'REXX SAY
   expr' instead.

  Syntax   CALC expression
  Sample   Multiply 2 numbers
   calc 2.5+4.8

 CALL
   Execute a REXX function, program or script. The command runs with
   PROFILE NOPREFIX. See 'command' for executing a TSO command and the
   REXX command for programs that must run as functions.
  Syntax   CALL name 'parm'
   name          External program name, i.e. BPXWDYN. Could be a REXX
                 script.
   parm          Parameters for the function, must be quoted.
  Samples
   call bpxwdyn 'alloc dd(dd1) da(sys1.help) shr reuse'

 CATSearch
   Get ICF catalog info.
  Syntax  CATSEARCH dsnmask ÝVOL volser¨ ÝTYPE type¨ ÝCAT catname¨
                    ÝFIELDS | F fldlist¨ ÝALL | A¨ ÝRVOL | R¨ ÝACAT¨
    dsnmask      Like ISPF 3.4, except you must add a dot and double
                 asterix (.**) to retrieve varable number of
                 qualifiers. See the ALL optiion.
    cat          Filter by catalogname, specific or mask.
    fldlist      List of variables to retrieve. Available names are
                 DSNAME, DTYPE, CATNAME and VOLSER. DSNAME may be
                 specified as NAME and CATNAME as CATALOG. Default is
                 DSNAME DTYPE VOLSER. The fld-list is interpreted, so
                 can contain field names, quoted constants,
                 expressions, or a mixture thereof. Use REALVOL
                 instead of VOLSER if you want to have the real volser
                 for an indirectly cataloged dataset returned, see
                 also the RVOL option. Default is DSNAME DTYPE VOLSER.
    type         Filter by datasettype, specific or mask. Types are
                 one of the following: CLUSTER, DATA, INDEX, NONVSAM,
                 GDS, GDG, PATH, AIX, ALIAS, UCAT, ATLLIB or ATLVOL
    volser       Filter by volser, specific or mask.
    ACAT         Set CATNAME = associated catalogname for TYPE ALIAS.
                 Note that you must include CATNAME in the FIELDS
                 specification.
    ALL|A        Select all datasets starting with dsnmask. Same as
                 adding '.**' to the dsnmask. Default is to select
                 datasets matching the supplied number of qualifiers
                 in dsnmask.
    RVOL|R       Option to have the real volser for an indirectly
                 cataloged dataset returned. Using the option when you
                 do not want to redefne the default field list.
   Samples
    1  CATSEARCH &user..**.isp* a
    2  CATSEARCH wj* type alias acat f name catname

 CHOP
   Leave left n bytes, or before 'text'.
  Syntax  CHOP n | text
   n              Position (column) in record.
   text           Text in record. If not found then record is not
                  chopped.
  Samples
   chop 12        By position
   chop '='       Record 'ABEND=ABE=' -> 'ABEND'

 CLear
   Empty the stack.
  Syntax  CLEAR

 CLIP
   Save or load semi-permanent data store. Data is stored in a
   temporary dataset, making data available outside of RXPIPE. The
   dataset is variable block reclen 27994 with space trk 1,2.
  Syntax  CLIP Save | Load Ýid¨
   Save          Save stack to dataset. It will be created or reused.
   Load          load dataset to stack.
   id            Optional 1-2 byte id to append to 'RXPIPE' to become
                 the DDname. Default is '1'.

 COLS
   Generate a columns line.
  Syntax  COLS n
   n             Column line width, default is 80.
  Sample
    COLS 60
   Will generate  ---------10--------20- . . . --50--------60

 COMBine
   Combine records by number, text or width.
  Syntax  COMBine num | ALL | text ÝCHR chr | SPACE¨ ÝNOTSHORT¨ ÝWIDTH
          wdth¨
   num           Specific number of lines to combine. Keeps last block
                 even if it has less than specified number of lines,
                 unless the NOTSHORT parameter is used.
   text          Text to combine by.
   ALL           Combine all lines into one.
   *             Combine all lines into one.
   chr           Use character for between combined parts. Character
                 may be in single quotes, which are stripped.
   NOTSHORT      Drop last block if it has less than specified number
                 of lines (num parameter).
   SPACE         Same as CHR ' '.
   wdth          Makes line width le wdth.
  Sample 1  Combine each block of 3 reords.
    COMBINE 3
  Sample 2  Combine blocks delimited by text 'IN-CAT'.
    COMBINE 'IN-CAT'
  Sample 3  Combine text by width of 70.
    COMBINE width 70

 COMPare
   Compare the stack to stream. Issues a mesage and sets $rc.
  Syntax  COMPARE id
    id           Stream id.

 COMPRESS
   Compress  Remove multiple blanks from all entries in the stack.
  Syntax  COMPRESS

 CONCAT
   Concatenate DDname.
  Syntax  CONCAT dd1 ddlist
   dd1           DDname to concatenate to.
   ddlist        A list of ddnames to concatenate to dd1.

 COUNT
   Count number of lines or words in the stack. Replace the stack with
   the number, unless the 'Term' keyword is used. 'Term' will just
   cause a display of the value. See also the STAT command.
  Syntax  COUNT ÝWords¨ ÝTerm¨

 DELSTACK
   Delete the stack (TSO DELSTACK command). See also the NEWSTACK
   command.

 DROP
   Drop a block of records y number and/or text.
  Syntax  DROP Ýtn¨ | ÝFIRST tn ¨ | ÝLAST ln¨
                ÝFROM fn | 'ft'¨ | ÝFROMAFTER 'fa'¨ | ÝFROMBEFORE 'fb'¨
                | ÝTO tn | 'tt'¨ | ÝTOAFTER 'ta'¨ | ÝTOBEFORE 'tb'¨
                | ÝCOUNT cn¨
    tn           Drop tn number of records from the top,
    ln           Drop ln number of records from the bottom.
    fn           Start record number to drop.
    ft           Drop from record with text.
    fa           Drop from after record with text.
    fb           Drop from before record with text.
    tn           Last record number to drop.
    tt           Drop to record with text.
    ta           Drop to after record with text.
    tb           Drop to before record with text.
    cn           Number of records to drop after from-text.
   Text need not be quoted unless it contains blanks or is numeric.
   Text is case sensitive. Count and any of the 'to's are mutually
   exclusive.
  Samples
   drop  from 4 to 22
   drop  from '006 Foxtrot'
   drop  last 22
   drop  from Delta tobefore Victor
   drop  from Delta count 8

 DSINFO
   Add dataset information using current stack as input. The DSNLIST
   command will most likely provide the same information if you are
   running under ISPF.
  Syntax  DSINFO varlist parms
   varlist       Return variables, default: SYSVOLUME SYSDSORG
                 SYSRECFM
   parms         Additional parameters as used with the REXX LISTDSI
                 function.

 DSNList
   Get dataset list, optionally with some information. This command
   requires that ISPF is active, otherwise use the CATSEARCH command,
   which in any case is recommended unless you need to list datasets
   by volume.
  Syntax  DSNLIST dsnmask ÝFIELDS fld-list¨ ÝVOL volume¨ ÝWHERE
          whr-list¨
   fld-list      DSNAME ispfvars. Refer to 'ISPF Services Guide'
                 LMDLIST table 7 'List of dialog variables containing
                 information about a data set' for a list of valid
                 ISPFvars. Fields are normally padded, i.e. dsname is
                 44 bytes wide. The fld-list is Interpreted, so can
                 contain field names, quoted constants, expressions,
                 or a mixture thereof. Default is DSNAME ZDLVOL.
   volume        volume or mask as valid for ISPF 3.4.
   whr-list      REXX expression to filter the generated list.
  Samples
   Using the REXX userid() function and requesting dsorg and recfm.
    dsnlist" userid()".test.p* fields dsname zdldsorg zdlrecfm
   Using the built-in &user variable and requesting just dsname.
    dsnlist  &user..**.ISP* fields dsname

 DUP
   Replicate lines
  Syntax  DUP num
   num           Number of copies including current.

 DUPSTACK
   Replicate stack
  Syntax  DUPSTACK num ÝSHIFT shfn¨
   num           Number of copies including current.
   shfn          Indent 2nd copy and onwards with increasing number of
                 blanks. First copy with shfn, 2nd copy with
                 shfn+shfn.

 EDIT
   Edit dataset using stack as ISPF edit macro.
  Syntax  EDIT datasetname
    datasetname  Fully qualified name.
  Notes
    CANCEL is automatically added, just in case, so you must add a
    SAVE command to preserve changes.
  Sample
   Change USER1 to ME everywhere in dataset &user..lib.data(zz).
          text change 'USER1' 'ME' all
        | text save
        | edit &user..lib.data(zz)

 EFFECT
   Apply some effect
  Syntax  EFFECT ROLL | WAVE num
   num           Number of lines for indent etc.
  Sample
   Effect roll 5

 ELSE
   Swap condition for conditional block. See the IF command.

 END
   Ends conditional block. See the IF command.

 EXClude
   Drop records with text or mask. Reverse of the INCLUDE command, see
   that for description of the operands.
  Syntax   EXCLUDE ÝCAPS¨ text | 'text' | mask

 FANIN
   Load internal streams to stack, applying filter and format.
    Similar to the LOAD command, except stack is cleared, filter and
    format can be applied individually to each stream and streams are
    loaded sequentially. Any number of streams can be defined, each
    definition must be preceeded by a colon. The stream records are
    passed to variables R (entire record) and W1-W10 (words 1 to 10)
    before the test is done. If all tests fail then the record is
    ignored. Default is no filter.
     -  See also the LOAD command.
  Syntax  FANIN ÝROTATE¨ :id1 Ýexpr¨ ÝWHERE filter¨ .. :idn Ýexpr¨
          ÝWHERE filter¨
   id            Id assigned to the stream. Should be numeric.
   expr          Optional REXX expression defining the stack record.
                 May contain expressions and/or quoted text (single
                 quotes only). Default is the entire record (R).
   filter        REXX expression, resulting in a true or false
                 condition. See the FILTER command for details. Put
                 the escape char in front of ':' in the expr.
   ROTATE        Read record 1 from all streams, then record 2 from
                 from all streams etc etc. Streams may have different
                 depths.
  Samples
   Fanin from streams 1 and 3, filter and format stream 1.
        Fanin
        :1 w2 w3 where pos('.LIST',r)>0
        :3

 FANOUT
   Save stack to internal streams by filter.
    Any number of streams can be defined, each definition must be
    preceeded by a colon. The stack records are passed to variables R
    (entire record) and W1-W10 (words 1 to 10) before the test is
    done. If all tests fail then the record is ignored. Records may be
    written to mutiple streams.
     -  See also the SAVE command.
     -  The value ?CATCH is set for each stream if a record is written
        to it, so you can use the expression WHERE \?CATCH to write
        records not caught by previous filters.
  Syntax  FANOUT :id1 Ýexpr¨ ÝWHERE filter¨ .. :idn Ýexpr¨ ÝWHERE
                 filter¨
   :id           Id assigned to the stream. Should be numeric.
   expr          Optional REXX expression defining the stream record.
                 May contain expressions and/or quoted text (single
                 quotes only). Default is the entire record (R).
   filter        REXX expression, resulting in a true or false
                 condition. See the FILTER command for details. Put
                 the escape char in front of ':' in the expr.
  Samples
   Fanout to 3 streams, filter and format all.
        Fanout
        :1 where pos('.ASMA.',r)>0
        :2 w2 w3 where pos('.BACKUP.',r)>0
        :3 'dezhi' w2 where pos('.DEZHI.',r)>0

 FIlter
   Filter the stack by expression.
  Syntax  FILTER expr | MASK mask | NOTNULL
    expr         A valid REXX IF statement without the IF and THEN
                 verbs. And (&) and OR (|) are supported, but you must
                 use the escape char in front of the vertical bar to
                 avoid conflict with the PIPE dlm, i.e. a \| b. You
                 can use the parsed fields r, w1-w20. You can use the
                 internal function MASK to apply a mask to a variable.
                 Mask characters are '*' for zero or no characters and
                 '%' for a single character.
    mask         A single unquoted mask as explained under expression
                 to be applied to the R (entire record) variable.
   NOTNULL       Drop all null records.
  Notes
    -  Special variables set: RECNUM
    -  Se also section 'Internal functions' later for functions that
       may be used in the FILTER expression.
  Sample 1 -  expression
    filter left(w1,3)='MAX' \| pos('CLASS=',w1)>0
  Sample 2 -  single mask
    filter mask *the%%octor*
  Sample 3 -  multiple ORd masks
    filter mask('*AS2*',r)  \| mask('*1010*',r)

 FOREACH
   Do command for eack stack record. FOREACH works on a copy of the
   stack, which have been cleared. The records are parsed into
   variables R and W1-W20. Multiple commands can be defined using the
   delimiter.
  Syntax   FOREACH command1 Ýdlm command2¨ .. Ýdlm commandn¨
   command  A valid RXPIPE command. Be aware that the stack is not
            preserved between command invocations, so avoid commands
            that modify existing stack entries.
   dlm      Colon (:). This means that any colons in the commands must
            be preceded by a backslash as shown in the PDS86 sample
            below.
  Samples
   Foreach read &w1(&w2) prefix &w2
    Assuming the stack contains a list of dataset- and member names,
    then the FOREACH command will read in each member and prefix each
    record with the member name.
   Foreach text -> &w1 : pds86 &w1 fi \: 'version setc'
    Writes the datasetname as heading, then calls PDS86 to do a scan
    for the text.

 FREE
   Free ddname
  Syntax  FREE ddname

 GETCONS
   Pull text from the terminal to a variable. Soon to be deprecated,
   use the ASK command instead.
  Syntax  GETCONS Ývarname¨
    name         Variable name. Default variable name is $ASK.

 HEAD
   Leave only top n lines. See also the TAIL command.
  Syntax  HEAD n
   If n is gt actual number of records, then all records are passed
   without any message.

 IF
   Conditional command or block. IF .. ELSE .. END can be nested and
   DOs are allowed.
  Syntax  IF expr THEN command
           or
          IF expr THEN DO
            .commands.
          END
          ELSE command
           or
          ELSE DO
            .commands.
          END
    expr         Valid REXX expression.
    command      A RXPIPE or REXX command,

  Beware of the difference of how variables are handled between a REXX
  statement and a RXPIPE command, i.e.
   REXX    if count>1 then call quit 'msg final text count is' count
   RXPIPE  if count>1 then | quit msg final text count is &count

  Sample  RXPIPE command
    IF  $rc>0 then quit 'rc 8 msg bad rc' /* RXPIPE command */
  Sample  REXX command
    IF  $rc>0 then say 'bad rc'
  Sample  IF .. ELSE .. END
    IF  $rc=0 then do
      .. process lines if condition was TRUE
    end
    else  do
      .. process lines if condition was FALSE
    end

 INClude
   Retain records with text or mask. You can use the FILTER command
   instead for full control of the filter specs.
  Syntax   INCLUDE ÝCAPS¨ text | 'text' | mask | NOTNULL
   text          Text without mask characters, the records will be
                 searched for the text.
   'text'        Quoted text, the records will be searched for the
                 unquoted text.
   mask          Text with mask characters, the mask will be applied
                 to records.
   CAPS          Compare upcased text/mask and data.
   NOTNULL       Drop all null records.
  Samples
   rxpipe  < &me..lib.data(drwho) | include Doctor*
   rxpipe  < &me..lib.data(drwho) | include caps doctor

 ISPF
   Run ISPF command.
  Syntax
   ISPF CMD  command
   ISPF EDIT  dataset-name (see also the EDIT command)
   ISPF SKEL  skeleton-name (see also the SKELETON command)
   ISPF MAKETBL  table-name var-list
   ISPF SETMSTAT  dataset-name(member)
   ISPF other  command
   -  see the RXPIISPF memeber for a detailed description.

 JOIN
   Join stream to stack
  Syntax  JOIN Ýid¨ ÝINNER | OUTER¨ KEYPOS1 kp1 KEYPOS2 kp2
                 KEYLEN kl ÝSEPC sepc¨
   id            Saved stream id, default is 1.
   INNER         Make inner join.
   OUTER         Make outer join, actually left outer join.
   kp1           Position of key in stack (left side)
   kp2           Position of key in stream (right side)
   kl            Key length
   sepc          Insert separator between left and right part. May be
                 quoted.

 JUST
   Justify line, insert chars to fit width.
  Syntax  JUST width Ýchar¨
   Default char is blank.

 KEEP
   Keep a block of records y number and/or text.
  Syntax  keep Ýtn¨ | ÝFIRST tn ¨ | ÝLAST ln¨
                ÝFROM fn | 'ft'¨ | ÝFROMAFTER 'fa'¨ | ÝFROMBEFORE 'fb'¨
                | ÝTO tn | 'tt'¨ | ÝTOAFTER 'ta'¨ | ÝTOBEFORE 'tb'¨
                | ÝCOUNT cn¨
    tn           keep tn number of records from the top,
    ln           keep ln number of records from the bottom.
    fn           Start record number to keep.
    ft           keep from record with text.
    fa           keep from after record with text.
    fb           keep from before record with text.
    tn           Last record number to keep.
    tt           keep to record with text.
    ta           keep to after record with text.
    tb           keep to before record with text.
    cn           Number of records to keep after from-text.
   Text need not be quoted unless it contains blanks or is numeric.
   Text is case sensitive. Count and any of the 'to's are multually
   exclusive.
  Samples
   -  keep from 12 to 18
   -  keep from Juliet to Oscar
   -  keep from November count 4
   -  keep frombefore Delta tobefore Kilo

 List
   List the stack
  Syntax  LIST Ý@¨ Ýtext¨ ÝWHERE¨ whr-expr
   @            Insert blank line before text.
   text         Header text.
   whr-expr     Filter records using whr-expr. See the FILTER command
                for details.
  The stack will be listed by default at termination, unless QUIT was
  specified with the CLEAR or STEM operand.

 LITeral
   Insert text in stack - alias of TEXT.

 LOAD
    Load internal stream(s) to stack See also the FANIN command.
  Syntax  LOAD Ýid1..idn¨ ÝCLEAR¨ ÝPREFIX ptext¨ ÝWHERE wexpr¨
          ÝROTATE¨
   id            Optional number(s) set by previous SAVE. Default is
                 1.
   CLEAR         Clear stack before load.
   ptext         Add text in front of all records.
   wexpr         A valid REXX expression, resulting in a true or false
                 condition. See the FILTER command for details.
   ROTATE        Take record 1 from all streams then record 2 from all
                 streams and so on and so forth.

 MBRList
   Make list of members in a pds.
  Syntax  MBRLIST dsnameÝ(mbr)¨ | ddnameÝ(mbr)¨
                 ÝÝFIELDS | F¨ fields¨ ÝVOL | V volser¨
                 ÝWHERE | W filter¨
   dsname        Fully qualified datasetname.
   ddname        DDname
   mbr           Full name or mask to select member(s)
   fields        Optinal list of fields to return in the output
                 record. Valid fields for a sourcelib are DSNAME NAME
                 CREDT MODDT MODTM SIZE INIT ID VERS MOD and ALIASOF.
                 Valid fields for a loadlib are DSNAME NAME SIZE ATTR
                 and ALIASOF. Default for both is NAME. The FIELDS / F
                 verb is only required if the field list does not
                 immediately follow the dsname / ddname.
   filter        Rexx expression, see the FILTER command for details.
  Notes
   -  The command adds entries to the existing stack, if any.
   -  The command requires ISPF services.
   -  The command is an external member.
  Samples
   -  MbrList userid.LIB.DATA fields name moddt modtm where
      left(modtm,2)=12
   -  mbrlist ispprof(ISR*) /* by ddname */

 NEWSTACK
   Add new stack (TSO NEWSTACK command). See also the DELSTACK
   command.
  Syntax  NEWSTACK

 NDUP
   Drop all duplicate lines
  Syntax  NDUP

 NDUPLINE
   Drop if previous line is duplicate
  Syntax  NDUPLINE

 NLOCate
   Leave records not with text. It is recommended that you use the
   FILTER command instead.
  Syntax   NLOCATE text

 ORDER
   Reorder stack last in, first out.
  Syntax   ORDER LIFO

 PAD
   Pad records
  Syntax  PAD ÝR|L¨ num Ýchar¨
   Default left/right value is Right, default char is a blank.

 PAUSE
   Wait for timer or keypress
  Syntax   PAUSE Ýsecs¨
   secs          nuber of seconds to wait. Default is to wait for
                 keypress.

 PDSMBRL
   Make list of members in a pds. Requires program PDS86. PDSMBRL has
   the advantage that it can provide creation date and various
   attributes for loadlib member.
  Syntax  PDSMBRL dsnameÝ(member)¨ | ddnameÝ(member)¨ ÝVOL volser¨
                 ÝÝFIELDS | F¨ fields¨ ÝWHERE | W filter¨
   dsname        Fully qualified datasetname.
   ddname        DD name
   member        Name or mask. Default is all members.
   fields        List of fields to return. Default is NAME. Valid
                 fieldnames for sourcelibs are NAME VERMOD CREDT MODDT
                 MODTM SIZE INIT MOD and USER. Valid fieldnames for
                 loadlibs are NAME ALIASOF CREDT SIZE SSI ATTR and
                 SATTR (SATTR returns abbreviated ATTR verbs). The
                 FIELDS / F verb is only required if the field list
                 does not immediately follow the dsname / ddname.
   filter        Rexx expression, see the FILTER command for details.

  Samples
   pdsmbrl my.source.lib name id moddt size w size>100 \| id='&user'

 PROGRAM
   Execute external program
  Syntax   PROGRAM name parms
   name          Process name to call.
   parms         Parameters for the program, they are not upcased.
  Sample
   PROGRAN iebgner

 QUIT
   Terminate RXPIPE.
  Syntax  QUIT ÝRC rc¨ ÝMSG text¨ ÝRETAIN¨ ÝSTEM stem¨
               ÝVAL ret-val¨ ÝVAR ret-var¨
   rc            Return code, default is 0 (zero).
   text          Text to show.
   ret-val       Return this value instead of the return code.
   ret-var       Return value of variable.
   RETAIN        Retain the stack (replace callers stack).
   stem          Returns code to load the stem. You must INTERPRET the
                 RXPIPE return value for it to work, i.e.
                   Interpret RXPIPE('... | QUIT STEM DATA.')
                 It is recomended that you return a stack and then build
                 the stem from that.
   The stack will be listed by default at termination, unless QUIT was
   specified with the CLEAR or STEM operand.
  Sample - return first record
   v = RxPipe("some-command | stem save a. | quit var a.1")

 REad
   Read dataset to stack (append) by name or libref.
  Syntax  READ dsnameÝ(member)¨ | DD=ddnameÝ(member)¨ ÝCOND¨ ÝKEEPIT¨
               ÝPREFIX pfx-text¨ ÝBUILD bld-expr¨ ÝWHERE whr-expr¨
               ÝSAVE save-id¨
   dsname        See the ALLOC command for different formats.
   ddname        Read from an existing allocatiion. You can use the
                 member operand to read a member from an allocated
                 pds.
   COND          Test if the dataset/member exists before attempting
                 the read. This avoids S013-18 abends. For cataloged
                 datasets only.
   KEEPIT        Leave libref (ddname) allocated
   pfx-text      Text to add in front of each line. Takes precedence
                 over the BUILD operand.
   bld-expr      Build record using bld-expr. See the BUILD command
                 for details. Ignored if PREFIX is defined.
   whr-expr      Filter records using whr-expr. See the FILTER command
                 for details. If you use the MASK subcommand, it must
                 be used as a function i.e. WHERE
                 MASK('*the%%octor*',r).
   save-id       Write data to stream save-id instead of the stack.
  Sample
    READ sys1.help(alloc)

 REPLace
   Replace a string with another.
  Syntax   REPLACE old new ÝWHERE expr¨
   old           Source string, see details below.
   new           Target string, see details below.
   expr          Filter records using expr. See the FILTER command.
    Both old and new strings must be enclosed in single quotes if they
    contain blanks. Both strings are case sensitive.
   See XLATE for faster translate of a single character.
  Sample
   Replace 'was here' 'is here' where pos('Kilroy',r)>0

 REXX
   Execute immediate REXX statement(s) or the stack.
  Syntax   REXX expr
   expr          Anything really. Multiple statements separated by a
                 semicolon. Variables generated can later be used with
                 the ampersand.
   null          Execute the stack.
  Sample
    rexx  zz=Listdsi('ispprof file') | say &sysvolume

 SAVE
    Save stack to internal stream. See also the FANOUT command.
  Syntax  SAVE Ýid¨ ÝCLEAR¨ ÝAPPEMD¨ ÝWHERE wexpr ¨
   id            Numeric id to use for later LOAD. Default is 1.
   APPEND        Append to stream.
   CLEAR         Clear the stack after save
   wexpr         A valid REXX expression, resulting in a true or false
                 condition. See the FILTER command for details.

 SAY
   Show text on terminal.
  Syntax  SAY text
   text   Un-quoted text. Variables are replaced by values. Quotes are
          shown as text.

 SDSF
   SDSF info or issue system command. The command is an external
   member, see external routine RXPISDSF for details.
  Syntax  command FIELDS fld-list OPTS sdsf-parm¨ ÝFILTER filter¨
          ÝDEST dest-ids¨ OWNER owner¨ ÝPREFIX prefix¨ ÝSYSNAME
          sysname¨ ÝCONS console¨ ÝDELAY delay¨ ÝNOID¨
   Samples  -
    -  sdsf proc fields dsname volser | table cols 2
    -  sdsf st filter jname eq wj* fields jname jobid
    -  sdsf cmd d net,majnodes

 SET
   Set variable from text or stack. See the section 'Built-in
   variables' above for a list of these.
  Syntax  SET var=var-expr WHERE sel-expr
   var-expr      Evaluate to a value, enclose text in single quotes.
   sel-expr      Test stack records for condition. The value will be
                 taken from the last stack record fulfilling the
                 condition. See the FILTER command for details.
  Samples  -
   Set DEFRC to internal value of $rc.
         SET  defrc=$rc
   Set TEXT1 to some text.
         SET  text1='Just testing'
   Set P to the second word of the stack record where the first word
   is 'Eifeltower'.
         SET p=w2 where w1='Eifeltower'

 SHIFT
   Shift records right or left, padding with char
  Syntax  SHIFT L | R n Ýc¨

 SKELeton
   Run one or more ISPF skeletons to build stack records. The stack is
   written to ISPF table RXPIPE before opening the skeletons, so you
   can use that in a )DOT statement in the skeleton(s). Or you can use
   the ISPF MAKETBL command to create a table with a different name,
   before running the SKELETON command. The SKELETON is really a short
   form of 'ISF SKEL'.
  Syntax  SKEL skelname1 .. skelnamen ( parm
   skelname      The skeleton name.
   parm          Text passed to the skeleton in name SKELPARM. There
                 is no trailing paranthesis, if any is supplied it is
                 passed as part of the text.

 SORT
   Sort using external sort command RXPIQSOR (Quick sort).
  Syntax  ÝA¨ ÝD¨ ÝR¨ sort ÝRn¨ ÝWn¨ Ýp l¨ .. ÝRn¨ ÝWn¨ Ýp l¨
    A       sort ascending (default).
    D | R   sort descending / reversed.
    Wn      word num n.
    Rn      right n of string.
    p l     from position p with length l.
  Samples
   sort w3 w2 1 4 sort 5 44 r
  Note that the command is an external member.

 SPLIT
   Split records into multiple records by argument, replacing the
   stack.
  Syntax  SPLIT text | pos
   text          Split at text.
   pos           Split at position.
  Default is a blank, same as specifying SPLIT ' '. Blanks lines are
  not output.

 STAT
   Get status for the stack.
  Generates variables COUNT, AVGLEN, MINLEN, MAXLEN, TOTSZ and RECFM.

 STEM
   Copy stack to stem, copy stem to stack.
  Syntax  STEM SAVE | LOAD name
   name          stem name incl trailing dot i.e. data.
   -  variable stem.0, containing the count, is also set.
  Note that if the STEM command is the last command, then it is
  changed to QUIT STEM name, see the QUIT command for details.

 STRIP
   Strip leading and/or trailing characters.
  Syntax  STRIPC ÝB|L|T¨ Ýchar¨ Ý+'append'¨
   B            Strip Both
   L            Strip Leading.
   T            Strip Trailing, default.
   char         Char to strip, default is a blank.
   append       Append text to stripped record, useful if you are
                going to combine records afterwards.

 SUBMIT
   Write stack to internal reader.
  Syntax  SUBMIT

 TABLE
   Make horizontal or vertical table from descrete words in the stack.
   All lines are joined prior to table build.

  Syntax  TABLE format ÝBORD borders¨ ÝBOT bot¨ ÝCOLS colnumber¨
                ÝCOLDEF coldefs¨ ÝDLM delimiter¨ ÝTOP top¨ ÝWIDTH width¨
   format        Format H or V - the entire stack is formatted as one
                 big string and each single element (see the DLM
                 operand) is placed in a table cell either
                 horizontally (default) or vertically. See the samples
                 below. Format R means that each stack record
                 constitutes a table row with each element (see the
                 DLM operand) as a table cell.
   borders       1-5 chars defining outer corners, outer vertical,
                 outer horizontal, inner vertical and inner horizontal
                 respectivly. The letter B can be used for a blank and
                 N can be used for null character. The default is no
                 borders. If specified as ALL or without a parameter
                 then +|-|- is used. Note that you must prefix a
                 vertical bar | with the left slash i.e. BORD +\|-: .
   bot           N to supress the bottom border line. This is useful
                 when combining multiple tables.
   colnumber     Number of columns. The default is calculated based on
                 the WIDTH value, or the number of operands in the
                 COLDEF parameter.
   coldef        Column definition. Each operand is in the form Ýa¨Ýl¨
                 where a is alignment L (left), R (right) or C
                 (center) and l is the length. One must be specified
                 for each column. I.e C10, A or 10. Default alignment
                 is left.
   top           N to supress the top border line. This is useful when
                 combining multiple tables.
   width         Total width of the list, the column width is
                 calculated.

  Sample -  horizontal table
     data='Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel'
      TABLE COLS 3
         Alpha   Bravo   Charlie
         Delta   Echo    Foxtrot
         Golf    Hotel
  Sample -  horizontal table with alignments
     data='Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel'
      TABLE COLDEF L8 C8 R8
         Alpha      Bravo     Charlie
         Delta       Echo     Foxtrot
         Golf       Hotel
  Sample -  vertical table
     data='Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel'
      TABLE V COLS 3
         Alpha   Delta   Golf
         Bravo   Echo    Hotel
         Charlie Foxtrot
  Sample -  by record
     Stack contains  -
         BACKUP.ALL    ,051 ,NONVSAM ,SYSXU1 ,051
         A.DATASETS    ,038     ,NONVSAM ,SYSXU1   ,048
         DDIR          ,054     ,CLUSTER ,         ,001
         DDIR.I        ,057     ,INDEX   ,SYSXU1   ,006
     Command -  TABLE R DLM ,
     Will show  -
         BACKUP.ALL      051       NONVSAM   SYSXU1     051
         A.DATASETS      038       NONVSAM   SYSXU1     048
         DDIR            054       CLUSTER              001
         DDIR.I          057       INDEX     SYSXU1     006

 TAIL
   Leave bottom n lines. See also the HEAD command.
  Syntax  TAIL n
   If n is gt actual number of records, then all records are passed
   without any message.

 TERMinal
   Write stack to terminal, clear stack.

 TEXT
   Insert text in stack
  Syntax  TEXT ÝATTOP|ATBOT¨ text
    Default position is ATBOT
  Samples
   Insert todays date and time using built-in variables
    TEXT Date is &$date and time is &$time

 TSO
   Run TSO command, trap responses and add them to the stack.

 TSONS
   Run TSO command, do not add response to the stack. Also sets $rc=0.
  Syntax  TSONS command

 USORT
   Sort using UNIX System Services (internal). See 'UNIX System
   Services Command Reference' for details.
  Syntax  QSORT Ý-u¨
   -u        Sort unique, must be lowercase.

 USS
   Run Unix System Services shell commnd. The USS command executes the
   BPXWUNIX function. Each USS command is a separate instance, so you
   cannot use one US command to change directory and then expect that
   that directory is current for a later USS command. See 'UNIX System
   Services Command Reference' for details.
  Syntax  USS command
   command       the shell command to run
  Samples
   List default directory
    RXPIPE USS ls -l
   An alternate word count
    RXPIPE < MY.LIB.DATA(TEXT1) | USS wc

 VERsion
   Return version info, must by the only command.
  Sample: say Rxpipe('version')

 VSAM
   Acces VSAM KSDS using external command RXPIVSAM. Read from, or
   write to, a VSAM KSDS. The VSAM dataset must exist. The TSO REPRO
   command is used internally, so the restrictions for REPRO applies
   to VSAM WRITE, i.e. sorting and duplicate records.
  Syntax
   VSAM READ | WRITE datasetname opts
    opts         REPRO options i.e. FROMKEY / TOKEY.
  Sample  -
    vsam read &$user..TEST.CL fromkey(SYS1.F*) tokey(SYS1.M*)

 VTABLE
   Short for 'TABLE V'
  Syntax  VTABLE table parameters

 WRite
   Write stack to dataset by name or libref
  Syntax  WRITE | > dsnameÝ(member)¨ | INTRDR | DD=ddnameÝ(member)¨
                opts ÝAPPEND¨ ÝKEEPIT¨
   dsname        See the ALLOC command for different formats.
   ddname        Write to an existing allocatiion. You can use the
                 member operand to write to a member from an allocated
                 pds.
   INTRDR        Allocate ddname to internal reader.
   opts          BPXWDYN parameters. Just NEW will create a new
                 dataset based on the stack. You can specify STDSYSIN
                 for a FB/80 dataset and STDSYSPRINT for a FB/121
                 dataset, each with a few tracks. See the ALLOC
                 command for more information.
   APPEND        Append data to existing dataset or pds member.
   KEEPIT        Leave libref (ddname) allocated
   TEMP          Create a temporary dataset. The dataset name is
                 returned in the $LASTDS variable, the DD name in
                 $LASTDD.
  Notes
   -  Will generate internal variales $LASTDD and $LASTDS.
   -  Will write member statistics if ISPF is availble.
  Sample 1 -  to member
    WRITE &user..lib.data(mbr1)
  Sample 2 -  new automatic
    WRITE &user..temp.ds new

 XLATE
   Translate characters in records.
  Syntax  XLATE ÝUPPER¨ | ÝLOWER¨ | Ýto from}
   The function uses the REXX TRANSLATE command internally, meaning
   that each character in 'from' is replaced by the corresponing
   character in 'to'. 'from' and 'to' are case sensitive. See REPLACE
   for replacing strings.
  Sample
   LIT ababab | XLATE 'ba' 'ab' -> bababa


Internal functions

 These functions are intended be used i.e. in the BUILD and FILTER
 commands.

 DELVERB(verb,string)        Return string without verb.
 HASALL(arg1,arg2,..,argn)   Return 1 (TRUE) if all arguments are
                             found in the R variable.
 HASANY(arg1,arg2,..,argn)   Return 1 (TRUE) if one arguments is found
                             in the R variable.
 HASNOT(arg1,arg2,..,argn)   Return 1 (TRUE) if none of the arguments
                             are found in the R variable.
 ISNUM(string)               Return 1 (true) if string is numeric,
                             else return 0 (false).
 LASTWORD(string)            Return last word in string
 LCASE(string)               Return string in lowercase
 MASK(mask,string)           Return 1 (true) if match, 0 (false) if
                             not.
 UCASE(string)               Return string in uppercase
 UCASE1(string)              Return string in lowercase with the first
                             char in uppercase.


Run external command
 command     Any command not recognized as an internal commmand may be
             run using its name. The response, if trappable, will be
             added to the stack, as well as QUEUED or PUSHed data.
 CALL name   See internal CALL command above.
 REXX name   See internal REXX command above.


Options string
 The command may start with an option string, which must begin with a
 minus sign(-). Multiple options must be separated by commas with no
 intervening blanks. The option string is not case sensitive. Do not
 place a delimiter after after the options, unless that is to read the
 stack.

  Valid options
    NOISPF   Do not check for runnning under ISPF. This is useful when
             used in an ISPF skeleton, to avoid error messages as ISPF
             commands may not be used in a skeleton.
    SCRW(w)  Set screen width. Default width is the actual screen
             width, if running under ISPF, or 80.
  Sample
   Call RxPipe "-noispf,scrw(120) <"inds "| inc SYS1. | list "

Adding own commands

 You can run external commands from the pipe, but you can also
 incoorporate commands as native PIPE commands. Just save it in the
 RXPIPE lib (concatenation) with a proper name and add it at the
 bottom of the RXPIPE member. Refer to the SORT command and the
 RXPIHSOR member for a sample.


External programs of interrest

 The programs are written by me, they can be downloaded from:
     http://harders-jensen.com
 They are also found on the CBTTAPE.ORG site in file 669.

 REXXGBLV
  The REXXGBLV program can store and retrieve variables, and copy
  between the stack and stems, both inside and outside RXPIPE. Sample
  load stem to stack from inside RXPIPE:
   cc=RexxGblv('save var(test2.)') /* save stem */ cc=RXPIPE("Call
   RexxGblv 'load var(test2.) tostack' | cons")
  Sample load stem to stem from inside RXPIPE:
   cc=RexxGblv('save var(test2.)') /* save stem */ cc=RXPIPE(". | Call
   RexxGblv 'load var(test2.)' | .")
  Sample save stem from inside RXPIPE:
   cc=RXPIPE(". | Call RexxGblv 'save stack as(test2.) gen0' | .")

 RXPATTRN
  REXX function to
   -  Test a string against a pattern
   -  Test a stem against a pattern
   -  Filter a stem using a pattern

 RXVSAMBA
  REXX function to add, replace, retrieve or delete records from a
  VSAM database. Access is normally by key/keyprefix, but some
  functions allow access based on text anywhere in the record. Data is
  either read from a REXX stem or stack, or written to a REXX stem or
  stack.
   -  VSAM types KSDS and fixed-length RRDS are supported.
   -  Initial load of both types is supported.

*END
