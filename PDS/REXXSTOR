//RXST005  JOB (G4LT),'REXXSTOR-005',CLASS=A,REGION=32M,
//*  RESTART=IVP,
//             MSGLEVEL=(1,1),MSGCLASS=X,TIME=NOLIMIT,COND=(0,LT)
/*JOBPARM L=999999
//* ?? REXXSTOR - Write and read data to nameed storage area ? e ?
//*
//A         EXEC ASMACL, XL,MACLIST=REXXSTOR,
//          PARM.C='TERM,RENT',
//          PARM.L='RENT,REFR,XREF,LIST,RMODE(ANY)'
//C.SYSLIB  DD DISP=SHR,DSN=CBT669.PP.REXXSTOR.LIB
//          DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//C.SYSTERM DD SYSOUT=*
//C.SYSIN   DD *
**asma syslib * CBT669.maclib
**asma opt    term
*Process compat(macrocase)
*
* Write and read data to nameed storage area.
*
*
* Syntax:
*  action,name,data|variablename|length
*    action is A, D, G, GA, GX, I, MAP, P or VER
*
* Return:
*   data    if action is G or I
*   address if action is A, GA or P
*   text    if action is VER
*   ' '     for other actions
*
* Variable REXXSTOR_RC is set as follows:
*    0     all ok
*  <>0     error, varaiable REXXSTOR_RS contains the reason text.
*
* Global register usage:
*   r11    basereg
*   r10    global storage
*
* Samples:
*
*  cc=REXXSTOR('a','test1','200')  /* get block                   */
*  va=REXXSTOR('ga','test1')       /* get block address           */
*  va=REXXSTOR('d','test1')        /* remove block                */
*  cc=REXXSTOR('p','test1','a nice day') /* write to store        */
*  v =REXXSTOR('g','test1')        /* get data                    */
*
* The STORAGE function can be used to store data directly in the data
* block, and retrieve data from the storage block, like this:
*
*  p1 = REXXSTOR('p','storblk1','Kilroy was here')
*  say  Storage(p1,8)                      /* 'kilroy w'        */
*  p2 = RexxStor('a','2k',2014)            /* acquire storage   */
*  text = 'Another fine mess you''ve gotten me in to'
*  cc = Storage(p2,,text)                  /* overwrite storage */
*  say  Storage(p2,length(text))
*
* Contact info
*  email   willy@harders-jensen.com
*  web     https://harders-jensen.com  (newest version here)
*
* Changelog
*  003 2017-03-11 support new REXXMACS macro set
*  004 2017-09-18 reentrant, refreshable
*  005 2018-11-25 internal restructure, cleanup
*
         print off
         Copy  WSAMMACS
         Copy  REXXMACS
         Copy  SYSMACS
         Copy  RXSTMACS
         print on
*        COPY  Z10MACS

* ------------------------------------------------------------------- *
* Prolog                                                              *
* ------------------------------------------------------------------- *
         lclc  &$module
&$module setc 'REXXSTOR'
&$build  setc '005'
         #subr set,entry=csect,base=r11,saend=saend

REXXSTOR #module base=(r12),text='&$build',                            c
               work=(lclstorl,lclstor,r10,C),                          c
               sa=sa1,xepilog=MainEpil
*-
         clear blank
         mvc   logr,blank
         mvc   inforec,blank
         mvc   reason,blank
         mvc   reasonl,=a(1)
         la    r14,blank
         la    r15,1
         stm   r14,r15,retval
         zap   sanum,p0

         ereg  0,1
*                           p1          p2        p3       p4
         RxInit parmlist=((action,4),(name,8),(data,A),(opt,8))
         lr    r7,r15             copy rc
         oc    opt,blank
         if    (=c'TRACE',eq,opt)
           mvi   trace,c'Y'
           trclog 'trace on'
         endif
         StrMake logr,'Modid  ',(REXXSTOR_id,REXXSTOR_idl)
         trclog ,

*- get the system anchor block (name/token)
         Call  NtAcq
         if    (ltr,r15,r15,nz)
           #module exit,20
         endif

*- debug - show parameter fields
         trcblk
         StrMake logr,'action ',(action_ds,1,cvd,6),' ',action,        c
               lenreg=r2
         trclog ,(r2)
         StrMake logr,'name   ',(name_ds,1,cvd,6),' ',name,            c
               lenreg=r2
         trclog ,(r2)
         StrMake logr,'data   ',reg=r4,lenreg=r3
         if    (cli,data_ds,ne,0)
           StrMake ((r4)),(data+6,2,cvd,6),+1,                         c
               (f.data,f.data+4,,60),lenreg=r3
         endif
         trclog ,(r3)
         StrMake logr,'opt    ',(opt_ds,1,cvd,6),' ',opt,              c
               lenreg=r2
         trclog ,(r2)
         trcblkend
*-
         if    (ltr,r7,r7,nz)
           StrMake logr,'init rc ',(r7,,cvdr,6)
           #module end
         endif
         oc    action,blank

*-
* check parms
*-

* check parm 1 - action
         if    (cli,action_ds,eq,0)   if zero then missing name
           Reason 'No action',1
           trclog 'No action'
           #module end
         endif

* get process address
         la    r2,actlist
         do    until,(cli,0(r2),eq,255)
           if    (clc,action,eq,0(r2))
             mvc   suba,4(r2)
             leave
           endif
           la    r2,8(,r2)
         enddo
         if    (suba,eq,zero)         if zero then unkown action
           Reason 'Bad action',1
           trclog 'Bad action'
           #module end
         endif

* check parm 2 - name
         if    (action,ne,=cl4'MAP'),and,(action,ne,=cl4'VER')
           if    (cli,name_ds,eq,0)   if zero then missing name
             Reason 'Missing name',2
             trclog 'Missing name'
             #module end
           endif
         endif

* call processor
         if    (cli,action,ne,c'D')
           l     r15,suba
           balr  r14,r15
         endif
         #module end,rc=0

* -------------fixed data----------------------------------------------

zero     dc    a(0)
p0       dc    p'0'
p1       dc    p'1'
ntname   dc    cl16'&$module..&$build'
         ds    0a
actlist  dc    cl4'A',v(acquire)
         dc    cl4'D',v(drop)
         dc    cl4'G',v(get)
         dc    cl4'GX',v(getx)
         dc    cl4'GA',v(geta)
         dc    cl4'P',v(put)
         dc    cl4'I',v(info)
         dc    cl4'MAP',v(map)
         dc    cl4'VER',v(version)
         dc    al1(255)
         ltorg

*=====================================================================*
*  End of module processing                                           *
*=====================================================================*
MainEpil #subr
*
         if    (zero,ne,retval)        data to return?
           RxRetVal f.retval,f.retval+4  address, length
         endif

* write variables
         l     r14,rc                  rc
         $cvd  r14,dw,len=8            as char
         RxVput name=('REXXSTOR_RC'),data=dw
         RxVput name=('REXXSTOR_RS'),data=(reason,f.reasonl)
*
         StrMake logr,'exit rc ',(rc,4,cvd,4)
         trclog ,20
*
         if    (cli,action,eq,c'D'),or,(cli,action+1,eq,c'X')
           Call  Drop
         endif
*
         #subr end
         #subr drop

*=====================================================================*
*  NT acquire                                                         *
*=====================================================================*
NtAcq    #subr xprolog=SubrProl,xepilog=SubrEpil

*
         Strmake logr,'NT acq ',ntname,lenreg=r2
         Trclog ,(r2)

* check for existing
         xc    ntblk(ntblkl),ntblk
         NTSERVX    rt,name=ntname,token=NtToken,rc=NtRc,pl=NtParms,   c
               level=HOME
         if   (clc,ntrc,eq,zero)
           mvc   SACBanch,nttokadr
           strmake logr,'NT rt ok, sacbanch ',(SACBanch,4,c2x),        c
               lenreg=r2
           trclog ,(r2)
           #subr end,rc=0
         endif

* setup anchor block
         trclog 'NT make'
         STORAGE OBTAIN,LENGTH=SAABblkl,SP=131,CALLRKY=YES
         xc    0(SAABblkl,r1),0(r1)   just in case
         st    r1,SACBanch            save anchor address
         using SACBblk,r1
         mvc   SACBname,=cl8')ANCHOR'
         mvi   SACBaddr,x'FF'         make it occupied
         drop  r1
         strmake logr,'SACBanch ',(SACBanch,4,c2x),lenreg=r2
         trclog ,(r2)

* create NT
         xc    ntblk(ntblkl),ntblk
         mvc   nttokadr,SACBanch
         NTSERVX cr,name=ntname,token=NtToken,rc=NtRc,pl=NtParms,      c
               level=HOME
         lr    r5,r15
         strmake logr,'NTcr rc ',(r5,,cvdr,6),' ntrc ',(ntrc,4,c2x),   c
               lenreg=r3
         if    (ltr,r5,r5,nz)
           mvc   reason,logr
           mvc   rc,=a(8)
         endif
         trclog ,(r3)
*
         #subr end,rc=(r5) f.ntrc
         #subr drop                   includes ltorg

*=====================================================================*
*  Action 'V', Return version info                                    *
*=====================================================================*
Version  #subr xprolog=SubrProl,xepilog=SubrEpil
*
         la    r14,verstr
         la    r15,l'verstr
         stm   r14,r15,retval
*
         #subr end
         #subr drop                   includes ltorg
verstr   dc    c'&$module..&$build &sysdate &systime'

*=====================================================================*
*  Action 'A', Acquire area                                           *
*=====================================================================*
Acquire  #subr xprolog=SubrProl,xepilog=SubrEpil
* check for required parameters
         if    (cli,name_ds,eq,0)
           reason 'Missing name',8
           #subrend rc=8            missing data
         endif
         if    (cli,data_ds,eq,0)
           reason 'Missing size data',8
           #subrend rc=8            missing data
         endif
         lm    r2,r3,data
         if    (ltr,r2,r2,z),or,(ltr,r3,r3,z)
           reason 'Missing size data',8
           #subrend rc=8            missing data
         endif

* go get
         sr    r1,r1                use name
         sr    r0,r0                length in data
         Call  StAdd
         if    (ltr,r15,r15,nz)
           reason 'Add failed',8
           #subr end,rc=8
         endif
         st    r1,fw                -> storage
         Strc2x from=fw,to=retval8
         la    r1,retval8
         la    r2,8
         stm   r1,r2,retval

* return
         #subr end
         #subr drop

*=====================================================================*
*  Action 'D', Drop area                                              *
*=====================================================================*
Drop     #subr xprolog=SubrProl,xepilog=SubrEpil
*
         if    (cli,name,eq,c' ')
           reason 'Name missing',8
           mvc   logr,reason
           trclog ,
         endif
*
         sr    r1,r1
         Call  StDel
         if    (ltr,r15,r15,nz)
           reason 'Area not found',8
           mvc   logr,reason
           trclog ,
         endif
*
         #subr end
         #subr drop

*=====================================================================*
*  Action 'G', Get data                                               *
*=====================================================================*
Get      #subr xprolog=SubrProl,xepilog=SubrEpil

* locate SACB
         sr    r1,r1                   use name
         Call  StLoc
         if    (ltr,r5,r1,z)
           reason 'Area not found',8
           mvc   logr,reason
           trclog ,
           #subr end,rc=8
         endif
         using SACBblk,r5
*
         strmake logr,(sacbaddr,4,c2x),+1,(sacbsize,4,cvd,6),          c
               +1,(f.sacbaddr,f.sacbsize,,60)
         trclog ,

* copy data to variable?
         if    (cli,data_ds,ne,0)
           lm    r2,r3,data
           bctr  r3,0
           mvc   wrk256(*-*),0(r2)
           ex    r3,*-6
           oc    wrk256(l'blank),blank
           strmake logr,'name ',(wrk256,1(r3)),lenreg=r2
           trclog ,(r2)
           RxvPut name=(wrk256,1(r3)),data=(f.sacbaddr,f.sacbsize)
           RxRetVal =c'0',1
           #subr exit,rc=0
         endif

* return data
         mvc   retval,SACBaddr
         mvc   retval+4,SACBsize
         #subr end
         #subr drop

*=====================================================================*
*  Action 'GA' - get address of block                                 *
*=====================================================================*
GetA     #subr xprolog=SubrProl,xepilog=SubrEpil

* locate SACB
         sr    r1,r1                   use name
         Call  StLoc
         if    (ltr,r5,r1,z)
           reason 'Area not found',8
           mvc   logr,reason
           la    r14,=c' '
           la    r15,1
           stm   r14,r15,retval
           trclog ,
           #subr end,rc=8
         endif

* return data
         using SACBblk,r5
         StrC2x from=SACBaddr,to=retval8
         la    r14,retval8
         la    r15,8
         stm   r14,r15,retval
*
         #subr end
         #subr drop

*=====================================================================*
*  Action 'GX', Get data and delete storage                           *
*=====================================================================*
GetX     #subr xprolog=SubrProl,xepilog=SubrEpil

         sr    r1,r1                   use name
         Call  Get
         if    (ltr,r15,r15,nz)
           #subr end,rc=8
         endif
         sr    r1,r1                   use name
         Call  StDel

         #subr end
         #subr drop

*=====================================================================*
* Action 'P' - write data to storage                                  *
*=====================================================================*
Put      #subr xprolog=SubrProl,xepilog=SubrEpil

* get new / replace old
         l     r0,data+4               use data width
         sr    r1,r1                   use name from parm
         Call  StAdd                   new element
         lr    r5,r0                   -> SCBA

* copy data
         using SACBblk,r5
         lm    r14,r15,data             -> source
         l     r0,SACBaddr              -> target
         lr    r1,r15                   copy size
         mvcl  r0,r14
*
         StrC2x from=SACBaddr,to=retval8
         la    r14,retval8
         la    r15,8
         stm   r14,r15,retval
*
         #subr end
         #subr drop

*=====================================================================*
*  Action 'I', Information about a storage element                    *
*=====================================================================*
Info     #subr xprolog=SubrProl,xepilog=SubrEpil

* locate SACB
         sr    r1,r1                   use name
         Call  StLoc
         if    (ltr,r5,r1,z)
           reason 'Area not found',8
           mvc   logr,reason
           trclog ,
           la    r14,blank
           la    r15,1
           stm   r14,r15,retval
           #subr end,rc=8
         endif

* make list
         using SACBblk,r5
         strmake inforec,name,' at ',(SACBaddr,4,c2x),                 c
               +1,' len ',(SACBsize,4,cvd,6),lenreg=r2
         mvc   logr,inforec
         trclog ,(r2)
         la    r14,inforec
         lr    r15,r2
         stm   r14,r15,retval

* return
         #subr end
         #subr drop

*=====================================================================*
*  Action 'MAP' - list all SACBs                                      *
*=====================================================================*
MAP      #subr xprolog=SubrProl,xepilog=SubrEpil
* anchor
         strmake logr,ntname,' Anchor ',(SACBanch,4,c2x),lenreg=r2
         RxSay logr,(r2)
* make list
         l     r5,SACBanch
         using SACBblk,r5
         do    until,(icm,r5,15,SACBnext,z)
           st    r5,fw
           strmake logr,'SACB at ',(fw,4,c2x),                         c
               ' name ',sacbname,' addr ',(SACBaddr,4,c2x),            c
               +1,' len ',(SACBsize,4,cvd,6),lenreg=r2
           RxSay logr,(r2)
         enddo
* return
         #subr end
         #subr drop

*=====================================================================*
* STLOC - locate storage element by name                              *
* Entry                                                               *
*  r1 -> name or 0                                                    *
* Exit                                                                *
*  r1 -> SACB or 0                                                    *
*=====================================================================*
StLoc    #subr xprolog=SubrProl,xepilog=SubrEpil
*
         if    (ltr,r6,r1,z)           if null parm
           la    r6,name               then use name from parm
         endif
         strmake logr,'locate ',((r6),8),lenreg=r2
         trclog   ,(r2)
*
         Using SACBblk,r5
         l     r5,SACBanch             -> 1st
         do    while,(SACBname,ne,0(r6))
           if    (icm,r5,15,SACBnext,z)  no next
             leave ,                   return 'not found' (r1 = 0)
           endif
         enddo
         if    (SACBaddr,eq,zero)
           sr    r5,r5                 deleted
         endif
         drop  r5
*
         if    (ltr,r5,r5,nz)          nz => found
           lr    r1,r5
           #subr end,rc=0
         endif
         sr    r1,r1
         #subr end,rc=1
         #subr drop

*=====================================================================*
* STADD - new storage element (reuse free cb if found)                *
* Entry                                                               *
*  r1 -> cl8'name' or 0. if 0 then use parm # 2 (name)                *
*  r0 =  size or 0. if 0 then use parm # 3 (pdata)                    *
* Exit                                                                *
*  r1 -> Storage obtained                                             *
*  r0 -> SACB element                                                 *
*=====================================================================*
StAdd    #subr xprolog=SubrProl,xepilog=SubrEpil

* if null name then use name from parm
         if    (ltr,r6,r1,z)
           la    r6,name
         endif

* if null size then use address and length from parm
         if    (ltr,r7,r0,z)
           lm    r2,r3,data
           bctr  r3,0
           j     *+10
           pack  dw,0(*-*,r2)
           ex    r3,*-6
           cvb   r7,dw
         endif

* if already there, then delete
         lr    r1,r6                   -> name
         Call  StDel

* locate a free element ( SACBaddr = 0 => free ) or get a new
         Using SACBblk,r5
         l     r5,SACBanch             -> 1st
         strmake logr,'SACBanch ',(SACBanch,4,cvxd),lenreg=r2
         trclog ,(r2)
         do    forever
           if    (icm,r1,15,SACBaddr,z)  free
             st    r5,fw
             strmake logr,'free SACB at ',(fw,4,cvxd),                 c
               +1,SACBname,lenreg=r2
             trclog ,(r2)
             leave
           endif
           if    (icm,r1,15,SACBnext,z)  no next
             STORAGE OBTAIN,LENGTH=SACBblkl,SP=131,CALLRKY=YES
             st    r1,SACBnext         update fwd ptr
             lr    r4,r1               copy address
             strmake logr,'new SACB at ',(SACBnext,4,cvxd),lenreg=r2
             trclog ,(r2)
             lr    r5,r4               use new
             leave
           endif
           lr    r5,r1                 try next
         enddo

* finally, get storage and hook to chain
         STORAGE OBTAIN,LENGTH=(r7),SP=131,CALLRKY=YES
         mvc   SACBname,0(r6)          copy name
         st    r1,SACBaddr             save address
         st    r7,SACBsize             save size
         strmake logr,'getmain ',(SACBsize,4,cvd,6),                   c
               ' at ',(SACBaddr,4,cvxd),' for ',sacbname,lenreg=r2
         trclog ,(r2)
         l     r1,SACBaddr             storage address
         lr    r0,r5                   SACB element address
*
         #subr end
         #subr drop

*=====================================================================*
* STDEL - delete entry                                                *
* Entry                                                               *
*  r1 -> cl8'name' or 0. passed unmodified to STLOC                   *
*=====================================================================*
StDel    #subr xprolog=SubrProl,xepilog=SubrEpil

* locate named element
         Call StLoc
         if    (ltr,r15,r15,nz)
           #subr  exit,rc=0 1
         endif

* delete
         trclog 'releasing..'
         lr    r5,r1
         Using SACBblk,r5
         l     r3,SACBaddr
         l     r4,SACBsize
         STORAGE RELEASE,LENGTH=(4),ADDR=(3),SP=131,CALLRKY=YES
         xc    SACBaddr,SACBaddr
         xc    SACBsize,SACBsize
         strmake logr,(fw,4,c2x),+1,SACBname,' deleted',lenreg=r2
         trclog   ,(r2)

* return
         #subr end
         #subr drop

*=====================================================================*
*  STMAP - list structure                                             *
*=====================================================================*
StMap    #subr xprolog=SubrProl,xepilog=SubrEpil

         Using SACBblk,r5
         l     r5,SACBanch             -> 1st
         do    until,(icm,r5,15,SACBnext,z)
           st  r5,fw
           strmake logr,(fw,4,c2x),+1,SACBname,+1,                     c
               ' addr ',(SACBaddr,4,c2x),' size ',(SACBblkl,4,cvd,6),  c
               lenreg=r2
           trclog   ,(r2)
         enddo

         #subr end
         #subr drop

*=====================================================================*
*  Subroutine prolog / epilog  - do tracing                           *
*  r10 -> global storage                                              *
*=====================================================================*
SubrProl #subr base=r6
         ap    sanum,=p'1'
         if    (zrx_ExComA,eq,zero),then=(#subrend,0)   no REXX
*
         TrcBlk
         l     r3,4(,r13)              reload callers
         l     r3,64(,r3)                basereg (r11)
         strmake logr,(10(,r3),8),' ',(sanum,4,p2d,2),                 c
               ' entry',lenreg=r2
*              ' entry prc ',(rc,4,cvd,4),lenreg=r2
         trclog   ,(r2)
         l     r1,4(,r13)              reload callers
         lm    r0,r1,20(r1)              r0+r1
         TrcBlkEnd
*
         #subr exit,rc=0
         #subr drop
*--
* r2 = #subr end rc
SubrEpil #subr base=r6
         if    (zrx_ExComA,eq,zero),then=(#subrend,(r2))  no REXX
         lr    r5,r2                   copy rc
*
         TrcBlk
         l     r3,4(,r13)              reload callers
         l     r3,64(,r3)                basereg
         strmake logr,(10(,r3),8),' ',(sanum,4,p2d,2),                 c
               ' exit rc ',(r5,,cvdr,8),' prc ',(rc,4,cvd,4),lenreg=r2
         trclog   ,(r2)
         l     r1,4(,r13)              reload callers
         lm    r0,r1,20(r1)              r0+r1
         TrcBlkEnd
*
         sp    sanum,=p'1'
         #subr exit,rc=(r5)            r5 = original r15
         #subr drop

*=====================================================================*
*  dynamic area                                                       *
*=====================================================================*

LclStor  Dsect
sa1      ds    (6*18)f                 save areas
saend    equ   *
*-
blank    ds    cl150
logrpfx  ds    a
logr     ds    cl120
inforec  ds    cl120
trace    ds    c
fw       ds    f
dw       ds    d
sanum    ds    pl4
storadrc ds    cl8
reasonl  ds    a
reason   ds    cl120
*-
rc       ds    a
retval   ds    2a(0)
retval8  ds    cl8
suba     ds    a
acqsz    ds    a
sacbanch ds    a
*-
         RexxMacs ds
*-
wrk256   ds    xl256
         org   wrk256
NtBlk    ds    0a
ntLevel  ds    a
NtRc     ds    a
NtToken  ds    4a
NtTokAdr equ   NtToken,4
NtParms  ds    6a
NtBlkl   equ   *-NtBlk
         org
*-
LclStorL equ   *-LclStor

*=====================================================================*
*  Storage Aquisition Control Block                                   *
*=====================================================================*
SACBblk  dsect
SACB     ds    0x
SACBname ds    cl8
SACBaddr ds    a                       address of area
SACBsize ds    a                       size of area
SACBnext ds    a                       next in queue
SACBblkl equ   *-SACBblk

*=====================================================================*
*  Storage Aquisition Anchor Block                                    *
*=====================================================================*
SAABblk  dsect
SAAB     ds    0x
SAABSACB ds    xl(SACBblkl)
SAABcnt  ds    a                       number of elements
SAABactn ds    a                       number of active
SAABblkl equ   *-SAABblk

*=====================================================================*
*  Various dsects                                                     *
*=====================================================================*
         IeaNtAsm
         RexxMacs dsect
*-
         END
//*
//* Prod version goes to lpalib
//*
//L.SYSLMOD DD DISP=SHR,DSN=CBT669.LINKLIB(REXXSTOR)
//*
//IVP      EXEC PGM=IKJEFT1B,PARM='%RXSTIVP'
//STEPLIB  DD DISP=SHR,DSN=CBT669.LINKLIB
//SYSEXEC  DD DISP=SHR,DSN=CBT669.PP.REXXSTOR.LIB
//SYSTSPRT DD SYSOUT=*,OUTLIM=2000
//*YSUDUMP DD SYSOUT=*
//SYSTSIN  DD DUMMY
