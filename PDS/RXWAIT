//RXWT002  JOB (1),'REXX-WAIT',
//*  RESTART=IVP1,
//             CLASS=A,MSGCLASS=X,REGION=32M,COND=(0,LT)
//* ?? RXWAIT - wait seconds or fractions of a second ? e ?
//*
//  SET IVP=IVP1
//*
//A  EXEC ASMACL, XL,MACLIST=RXWAIT,
//        PARM.C='TERM',PARM.L='RENT,LIST' ,AMODE(31)
//C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB
//          DD DISP=SHR,DSN=SYS1.MODGEN
//          DD DISP=SHR,DSN=CBT669.PP.RXWAIT.LIB
//C.SYSTERM DD SYSOUT=*
//C.SYSIN   DD *
**asma syslib  CBT669.PP.RXWAIT.LIB
*Process compat(macrocase)
*
* RXWAIT - wait seconds or fractions of a second
*
* Build: 002
*
* Syntax
*  cc=RXWAIT(time-spec)                   REXX function
*   or
*  RXWAIT timespec                        TSO cmd
*   or
*  // EXEC PGM=RXWAIT,PARM=timespec       batch step
*
*    time-spec:
*      n          seconds
*      .nn        fractions of seconds
*      =hhmmssth  hours, minutes, seconds, thousands of seconds
*      VERSION    return version info (REXX only)
*
* Return code
*  0   ok
*  8   parameter error
*
* Samples
*  zz=RxWait(10)           /* 10 seconds */
*  zz=RxWait('=00001000')  /* 10 seconds */
*  zz=RxWait('=00000050')  /* half of a second */
*  zz=RxWait('.5')         /* half of a second */
*  zz=RxWait('.25')        /* quarter of a second */
*
* Installation notes:
*   Fully reentrant, so can (should) be in the lpalib. If not, then
*   the program will reload itself the first time, thus stay in the
*   JPAQ.
*
* Non-IBM macros:
*   $CVD     $LA      CDEUCTZ2 EQUATE   MPRINT   MVLIT
*   REXXMACS WSAMMACS
*
* New in this build:
* 2019-07-08  002  Add '.' and '=' parm formats
*                  Add CDEUCTZ2 macro to keep lmod in storage
*                  Allow TSO cmd and batch pgm
*
* Contact info
*  email   willy@harders-jensen.com
*  web     https://harders-jensen.com  (newest version here)
*

         print off
         Copy  WsamMacs
         Copy  RexxMacs
         Copy  SysMacs
         Copy  RXWTMacs
         print on

* ------------------------------------------------------------------- *
* Prolog                                                              *
* ------------------------------------------------------------------- *
         lclc  &$module,&basereg,&version
&version setc  '002'
&basereg setc  'R11'
&$module setc  'RXWAIT'
&$module AMODE 31
&$module RMODE ANY
         Equate R
&$module Csect
         using &$module,r15
         j     prolog
         drop  r15
$version dc    C'&$module '
         dc    C'&version &SYSDATC &SYSTIME'
$versionl equ  *-$version
Prolog   ds    0a
         bakr  14,0
         lr    &basereg,r15        set up a base register
         using &$module,&basereg   establish addressability
         lnr   r15,r15
         bassm r15,0                   set amode 31

         STORAGE OBTAIN,LENGTH=LCLSTORL  GET A LOCAL DATA AREA
         lr    r10,r1              use ldareg (r13) for local data area
         using lclstor,r10         establish addressability
         la    r13,sa1
         mvlit retval,'00000000'
         mvc   retvall,=a(8)
         mvc   rc,zero
         mvi   isrexx,0
         mvi   istso,0
*-
* Keep module in JPAQ for duration of job / TSO session
*-
         CDEUCTZ2
*-
* Test for TSO user
*-
         $Locate jscb
         if    (lt,r1,JSCBPSCB-IEZJSCB(,r15),nz)
           mvi   istso,1
         endif
*-
* Init REXX interface
*-
         if    (cli,istso,eq,1)
           ereg  0,1
           RxInit ,
           if    (ltr,r0,r0,nz)        REXX init ok?
             mvi   isrexx,1
           endif
         endif
*-
* get parm 1
*-
         if    (cli,isrexx,eq,1)
           l     r4,zrx_r1             old r1
           using efpl,r4               point to parmlist
           if    (cli,efplarg,eq,x'FF')
             mvc  rc,=al2(10)
             j    Back
           endif
           l     r5,efplarg
           drop  r4
           lm    r14,r15,0(r5)         address and length
           if    (ltr,r15,r15,z)
             mvc  rc,=al2(8)
             j    Back
           endif
           bctr  r15,0
           j     *+10
           mvc   parm(*-*),0(r14)
           ex    r15,*-6
           la    r15,1(,r15)
         else
           ereg  0,1
           getparm parm                r15 = length
         endif
         st    r15,parml
         oc    parm,=cl20' '
*-
*        Version
*-
         if    (cfi,r15,eq,7),and,(cli,isrexx,eq,1),                   c
               and,(=c'VERSION',eq,parm)
             RxRetval $version,$versionl
             j    Back2
*-
*        dintvl format: HHMMSSth
*-
         elseif (cli,parm,eq,c'=')     full parm
           if    (cfi,r15,ne,9)        check length
             mvc  rc,=al2(9)
             j    Back
           endif
           mvc   dw,parm+1
           STIMER WAIT,DINTVL=dw
           j     back
*-
*        .fractions
*-
         elseif (cli,parm,eq,c'.')     fractions
           if    (cfi,r15,gt,3)
             mvc  rc,=al2(8)
             j    Back
           endif
           lr    r3,r15
           bctr  r15,0
           bctr  r15,0
           j     *+10
           pack  dw,parm+1(*-*)
           ex    r15,*-6
           cvb   r2,dw
           if    (cfi,r3,eq,2)        .n
             mhi   r2,10              then *10
           endif
           st    r2,fw
           STIMER WAIT,BINTVL=fw
           j     back
         elseif (tm,parm,x'f0',o)
         else
           mvi   rc+1,8
           j     back
         endif
*-
*        whole seconds
*-
         bctr  r15,0
         j     *+10
         pack  dw,parm(*-*)
         ex    r15,*-6
         cvb   r2,dw
         mhi   r2,100                 *100 => seconds
         st    r2,fw
         STIMER WAIT,BINTVL=fw

* -------------end of module processing--------------------------------
Back     Cnop  0,4
         if    (cli,isrexx,eq,1)
           lh   r1,rc
           $cvd  r1,retval,len=8
           RxRetval retval,f.retvall
         endif

Back2    Cnop  0,4
         sr    r5,r5
         if    (cli,isrexx,eq,0)
           lh    r5,rc
         endif
         l     r13,4(,r13)
         STORAGE RELEASE,LENGTH=LCLSTORL,ADDR=(R10)
         lr    r15,r5
         pr

* -------------fixed data----------------------------------------------
         Ltorg
         ds    0a

zero     dc    a(0)
         ds    0a
         ltorg
         ds    0d

* -------------dynamic area--------------------------------------------

LclStor  Dsect
sa1      ds    18f                     save area
saend    equ   *
*-
rc       ds    h
fw       ds    f
dw       ds    d
isrexx   ds    x
istso    ds    x
parml    ds    a
parm     ds    cl20
retval   ds    cl8
retvall  ds    a
         RexxMacs ds
*-
         ds    0d
LclStorL equ   *-LclStor

         RexxMacs dsect
         print nogen
         IEZJSCB
*-
         END
//*
//* Production version can be in LPALIB
//* activate dynamically:
//*   SETPROG LPA,ADD,MODNAME=RXWAIT,DSNAME=CBT669.LINKLIB
//*
//L.SYSLMOD DD DSN=CBT669.LINKLIB(RXWAIT),DISP=SHR
//*
//IVP1     EXEC PGM=IKJEFT1B,PARM='RXWT&IVP'
//STEPLIB  DD DISP=SHR,DSN=*.A.L.SYSLMOD
//SYSEXEC  DD DISP=SHR,DSN=CBT669.PP.RXWAIT.LIB
//SYSTSPRT DD SYSOUT=*,OUTLIM=1000
//SYSTSIN  DD DUMMY
//*
//IVP2     EXEC PGM=RXWAIT,PARM=6
//STEPLIB  DD DISP=SHR,DSN=*.A.L.SYSLMOD
//*
//IVP3     EXEC PGM=IKJEFT1B
//STEPLIB  DD DISP=SHR,DSN=*.A.L.SYSLMOD
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD  *
 RxWait 6
