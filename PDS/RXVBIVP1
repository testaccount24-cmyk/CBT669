 /*                                                             REXX
  RXVSAMBA Installation Verification build 022
 */
 parse source sys type whoami ddn whereami .
 address tso
 maxrc=0
 totdel=0
 totins=0
 dbkeylen=25
 cols100= '----+----1----+----2----+----3----+----4',
       || '----+----5----+----6----+----7----+----8',
       || '----+----9----+----0'
 cols40=left(cols100,40)
 cols80=left(cols100,80)

 arg p
 if p<>'' then say 'Parameters:    ' p
 parse var p . 'PFX('dspfx')' . 0 . 'PGM('pgmname')' .,
       0 . 'DELA('dela')' . 0 . 'VOL('testvol')' .
 parse var whereami q1'.'
 if dspfx='' then dspfx=userid()
 if pos('.',dspfx)=0 then dspfx=dspfx'.RXVSAMBA'
 ksdsds ="'"dspfx".TEST.KSDS'"
 rrdsds ="'"dspfx".TEST.RRDS'"
 if testvol='' then do
   zz=listdsi('sysexec file')
   call silent "listc ent('"sysdsname"') vol"
   testvol= word(translate(value('$.'$.0),' ','-'),2)
 end
 pgmname=word(pgmname 'RXVSAMBA',1)
 dela   =word(dela    'N',1)
 call xmsg 'Program test specs'
 say 'Dataset prefix..' dspfx
 say 'Test KSDS name..' ksdsds
 say 'Test RRDS name..' rrdsds
 say 'Test volume.....' testvol
 say 'Program name....' pgmname
 say 'Delete-after....' dela
 say ''

 /*------------------ Version ----------------------------------------*/
 call xmsg 'Test version'
 cc=RunPgm('version')
 say 'version' RXVBVERS
 say ''

 /*------------------ Status -----------------------------------------*/
 call xmsg center('KSDS',70,'-')
 say ''
 Call MakeKSDS     /* setup test data */
 Call DBinfo 'KSDS'
 if RXVBrecl<>200 then Exit Xmsg('*error*, lrecl should be 200',20)
 say ''

 call xmsg 'Get all begin'
 cc=RxVsamBa('get dd(ksds) stem(lst.)')
 call xmsg 'Get all ended rc' cc 'returned' lst.0 'records'

 Call ListDB 'ListDB before'
 say ''
 /*Signal 0Delete  */
 /*------------------ Get        -------------------------------------*/
 call xmsg 'Test get by key ISP to stem'
 key='ISP'
 drop lst.
 lstn=5
 cc=RunPgm('get dd(ksds) key('key') stem(lst.)')
 if lst.0<>lstn then exit Xmsg('*'0+lst.0 'records read, not' lstn,20) ,
      + Listlst()
 say  0+lst.0 'records returned as expected'
 Call ListLst

 call xmsg 'Test get by key ISP to stack'
 cc=RunPgm('get dd(ksds) key('key') stack')
 if queued()<>lstn then exit Xmsg('*wrong number of records read',20)
 call xmsg queued() 'records returned as expected'
 Call ListStack

 say ''
 call xmsg 'Test get by text ZXSYS1 to stem'
 drop lst.
 lstn=6
 cc=RunPgm('get dd(ksds) text(ZXSYS1) pos(30) stem(lst.)')
 if lst.0<>lstn then exit Xmsg('*'0+lst.0 'records read, not' lstn,20) ,
      + Listlst()
 call xmsg 0+lst.0 'records returned as expected'
 Call ListLst

 say ''
 call xmsg 'Test get by key ISP and text ZXSYS2 to stem'
 drop lst.
 lstn=2
 cc=RunPgm('get dd(ksds) key(ISP) text(ZXSYS2) pos(30) stem(lst.)')
 if lst.0<>lstn then exit Xmsg('*'0+lst.0 'records read, not' lstn,20) ,
      + Listlst()
 call xmsg 0+lst.0 'records returned as expected'
 Call ListLst

 call xmsg 'Test get by keylist to stem'
 keyl.1='MSGX'
 keyl.2='CBT'
 keyl.3='YNOTFOUND1'
 keyl.4='YNOTFOUND2'
 keyl.0=4
 do n=1 to keyl.0
   say '  ->' keyl.n
 end
 drop lst.
 cc=RunPgm('get dd(ksds) keystem(keyl.) stem(lst.)')
 Call ListLst
 if lst.0<>4 then exit Xmsg('*wrong number of records read, not 4',20)
 call xmsg '4 records returned as expected'
 say ''

 call xmsg 'Test get by key ISP to stem'
 key='ISP'
 drop lst.
 lstn=5
 cc=RunPgm('get dd(ksds) text(.L0AD) pos(5) endpos(35) stem(lst.)')
 if lst.0<>lstn then exit Xmsg('*'0+lst.0 'records read, not' lstn,20) ,
      + Listlst()
 call xmsg 0+lst.0 'records returned as expected'
 Call ListLst
 say ''

 call xmsg 'Get by text in list by pos 59:'
 getlst.1='  255 27998'; say ' list -> "'getlst.1'"'
 getlst.2='  150 32'   ; say ' list -> "'getlst.2'"'
 getlst.3='  200 '     ; say ' list -> "'getlst.3'"'
 getlst.0=3
 xn      =7 /* expected number of returned records */
 drop lst.
 cc=RunPgm('get dd(ksds) textstem(getlst.) pos(59) stem(lst.)')
 if lst.0<>xn then do
   say '*'lst.0 'records retrieved, not' xn
   call Listlst
   call ListDb 'Db data'
   exit 20
 end
 call xmsg xn 'records retrieved as expected'
 Call ListLst 'Retrieved records:'
 say ''

 /*------------------ PUT --------------------------------------------*/
 call xmsg 'Test PUT'
 Call ListDB 'Before updates'
 upd.1=right( 4,25,0) 'This is an updated record -  1'
 upd.2=right( 6,25,0) 'This is an updated record -  2'
 upd.3=right(10,25,0) 'This is an updated record - 10, some additional data'
 upd.4=right(100,25,0) 'This is a new record - 100, some additional data'
 upd.0=4
 say upd.0 'Updates in stem'
 do n=1 to upd.0
   say upd.n
 end
 cc=RunPgm('put dd(ksds) stem(upd.) ')
 if cc<>0 then call rtn '**update 1 rc' cc RXVBERRM,20
 if rxvbwrit<>4 then,
   exit xmsg('**Expected writes: 4, actual:' rxvbwrit+0,20)
 if rxvbinse<>1 then,
   exit xmsg('**Expected inserts: 1, actual:' rxvbinse+0,20)
 say ''
 Call ListDB 'After updates by stem'
 say ''

 Call MakeKSDS 'silent'
 queue right(11,25,0) 'This is an updated record - 11'
 queue right(12,25,0) 'This is an updated record - 12'
 queue right(25,25,0) 'This is an inserted record - 25, some additional data'

 say  queued() 'records in stack'
 cc=RunPgm('put dd(ksds) stack')
 if cc<>0 then call rtn '**update 1 rc' cc RXVBERRM,20
 if rxvbwrit<>3 then,
   exit xmsg('**Expected writes: 3, actual:' rxvbwrit+0,20)
 if rxvbinse<>1 then,
   exit xmsg('**Expected inserts: 1, actual:' rxvbinse+0,20)
 say ''
 Call ListDB 'After updates by stack'
 say ''

 /*------------------ INSERT -----------------------------------------*/
 call xmsg 'Test INSERT'
 Call MakeKSDS 'silent'
 ins.1='CBT.CNTL.INSERT              I-STEM PO   FB       80 27920'
 ins.2='L1NKL1B.INSERT               I-STEM PO   U     27998 32756'
 ins.3='TOOLBOX.L1B.OLD.INSERT       I-STEM PO   FB       80 27920'
 ins.4='WSA4.MENU.INSERT             I-STEM PO-E VB      150 32760'
 ins.0=4
 say 'Inserting' ins.0 'records from stem'
 cc=RunPgm('insert dd(ksds) stem(ins.) ')
 if RXVBINSE<>ins.0 then ,
   exit Xmsg('*wrong number of records inserted' 0+rxvbinse', not' 0+ins.0,20)
 say RXVBINSE+0 'records inserted as expected'
 say ''
 Call ListDB 'After inserts by stem'
 say ''

 Call MakeKSDS 'silent'
 queue 'ZCBT.CNTL.INSERT             I-STACK PO   FB       80 27920'
 queue 'ZL1NKL1B.INSERT              I-STACK PO   U     27998 32756'
 queue 'ZTOOLBOX.L1B.OLD.INSERT      I-STACK PO   FB       80 27920'
 queue 'ZWSA4.MENU.INSERT            I-STACK PO-E VB      150 32760'
 qn=queued()
 call xmsg 'Inserting' qn 'records from stack'
 cc=RunPgm('insert dd(ksds) stack ')
 if RXVBINSE<>qn then exit Xmsg('*wrong number of records inserted',20)
 call xmsg RXVBINSE+0 'records inserted as expected'
 say ''

 /*------------------ Add/update by value-----------------------------*/
 call xmsg 'Test add by value'
 val=left('MSGX.L1NKL1B2',44) 'added by value'
 cc=RunPgm('Put dd(ksds) value('val')')
 if RXVBINSE<>1 then exit Xmsg('*number of records inserted not 1',20)
 call xmsg 'Test update by value'
 val=left('MSGX.L1NKL1B',44) 'updated by value'
 cc=RunPgm('Put dd(ksds) val('val')')
 if RXVBUPDT<>1 then exit Xmsg('*number of records updated not 1',20)
 say ''

 Call ListDB 'After add/inserts by stack and value'
 say ''

 /*------------------ Delete          --------------------------------*/
0Delete:
 call xmsg 'Delete by key WSA4.'
 Call MakeKSDS 'silent'
 cc=RunPgm('delete dd(ksds) key(WSA4.) list(lst.) ')
 deln=4                   /* expected no of deletes */
 if RXVBDELE<>deln then,
   exit Xmsg('*'0+rxvbdele 'records deleted, not' deln,20)
 say deln 'records deleted as expected'
 Call ListLst 'records deleted:'
 Call ListDb
 say ''

 call xmsg 'Delete by text:'
 Call MakeKSDS 'silent'
 cc=RunPgm('delete dd(ksds) text(.L0AD) pos(5) endpos(35) list(lst.)')
 deln=5                   /* expected no of deletes */
 if RXVBDELE<>deln then,
   exit Xmsg('*'0+rxvbdele 'records deleted, not' deln,20)
 call xmsg '10 records deleted as expected'
 Call ListLst 'records deleted:'
 say ''

 call xmsg 'Delete by key WSA4. and text ZXSYS2 PS'
 Call MakeKSDS 'silent'
 cc=RunPgm('delete dd(ksds) key(WSA4.) text(ZXSYS2 PS) list(lst.)')
 deln=1                   /* expected no of deletes */
 if RXVBDELE<>deln then,
   exit Xmsg('*'0+rxvbdele 'records deleted, not' deln,20)
 say deln 'records deleted as expected'
 Call ListLst 'records deleted:'
 Call ListDb
 say ''

 call xmsg 'Delete by data in list by pos 59:'
 Call MakeKSDS 'silent'
 dellst.1='  255 27998'; say ' delete ->' dellst.1
 dellst.2='  200 27800'; say ' delete ->' dellst.2
 dellst.0=2
 delxn   =4 /* expected number of deletes */
 cc=RunPgm('delete dd(ksds) textstem(dellst.) pos(59) list(lst.)')
 if RXVBDELE<>delxn then,
   exit Xmsg('*wrong number of records deleted, not' delxn,20) + ListDb()
 call xmsg delxn 'records deleted as expected'
 Call ListLst 'Deleted records:'
 Call ListDb
 say ''
 Exit Ok()

 /*------------------ Pull records   ---------------------------------*/
 call xmsg 'Pull records with key WSA4.'
 Call MakeKSDS 'silent'
 drop lst.
 cc=RunPgm('pull dd(ksds) key(WSA4.) stem(lst.)')
 xn=4
 if rxvbdele<>xn then,
   exit Xmsg('*delete count is' 0+rxvbdele', not' xn,20) + Listlst()
 if lst.0<>xn then,
   exit Xmsg('*'0+lst.0 'records pulled, not' xn,20) + Listlst()
 Call ListLst 'Records pulled:'
 say ''

 call xmsg 'Pull by text in list by pos 59:'
 drop getlst. lst.
 Call MakeKSDS 'silent'
 getlst.1='  255 27998'; say ' list -> "'getlst.1'"'
 getlst.2='  150 32'   ; say ' list -> "'getlst.2'"'
 getlst.0=2
 xn   =4 /* expected number of returned records */
 cc=RunPgm('pull dd(ksds) textstem(getlst.) pos(59) stem(lst.)')
 if lst.0<>xn then,
   exit Xmsg('*'lst.0 'records retrieved, not' xn,20)+Listlst()
 Call ListLst 'Retrieved records:'
 say ''

 /*------------------ Get with mask  ---------------------------------*/
 drop lst.
 call xmsg '- Get keyed with mask -'
 cc=RunPgm('get dd(ksds) key(M) mask(*.CNT*) pos(2) endpos(16)',
           'stem(lst.) ')
 if lst.0<>2  then,
   exit Xmsg('*'lst.0 'records retrieved, not 2 ',20)+Listlst()
 Call ListLst 'List key(M) mask(*.CNT*) pos(2) endpos(16)'
 say ''
 drop lst.

 call xmsg '- Get sequential with mask -'
 cc=RunPgm('get dd(ksds) mask(*L1B*) pos(03) endpos(10) stem(lst.) ')
 if lst.0<>11 then,
   exit Xmsg('*'lst.0 'records retrieved, not 11',20)+Listlst()
 Call ListLst 'Listed 11 records with mask *L1B* in pos 3-10'
 say ''

 /*------------------ Get with mask in word (v030) -------------------*/
 drop lst.
 say ''
 call xmsg '- Get keyed with mask in word (v030) -'
 cc=RunPgm('get dd(ksds) mask(M*Z*) word(1)',
           'stem(lst.) ')
 Call ListLst 'List result'
 xn=2
 if lst.0<>xn then,
   exit Xmsg('*'lst.0 'records returned, not' xn,20)
 drop lst.
 say ''

 /*------------------ Delete by mask ---------------------------------*/
 call xmsg '- Delete by mask -'
 cc=RunPgm('delete dd(ksds) mask(*PO-*) list(lst.)')
 if RXVBDELE<>3 then,
   exit Xmsg('*'rxvbdele+0 'records deleted, not 3',20)+Listlst()
 Call ListLst 'Deleted 3 records with mask *PO-*'
 say ''

 /*------------------ Get with trace ---------------------------------*/
 call xmsg '- Get with trace -'
 cc=RunPgm('get dd(ksds) key(WFM) stem(lst.) trace')
 say ''
 /* sequential
 cc=RunPgm('get dd(ksds) stem(lst.) trace')
 say ''        */

 /*------------------ Invalid comand ---------------------------------*/
 call xmsg '- invalid command -'
 cc=RunPgm('zet dd(ksds) key(WFM) stem(lst.)',12)
 cc=RunPgm('del dd(ksds) textstem(dsns.) start(21) stem(dbl.)',12)
 say ''
 Call Silent("free dd(ksds)")
 say ''

 /*------------------ RRDS make DB -----------------------------------*/
 call xmsg center('RRDS',70,'-')
 say ''
 call xmsg 'Make RRDS db' rrdsds
 Call Silent "DELETE" rrdsds
             "DEFINE CLUSTER(NAME("rrdsds")",
             "RECORDSIZE(100 100) TRACKS(3) VOL("testvol") NUMBERED)"
 if rc<>0 then exit xmsg('Define failed rc' rc ,8)

 cc=BpxWdyn("alloc dd(rrds) da("rrdsds") old reuse")
 if cc<>0 then exit xmsg('Allocate failed rc' cc ,8)

 Call DBinfo 'rrds'

 call xmsg 'Load DB'
 queue 'Doctor Who is a British science-fiction television programme'
 queue 'produced by the BBC from 1963 to the present day. The programme'
 queue 'depicts the adventures of the Doctor, a Time Lord a time-travelling'
 queue 'humanoid alien. He explores the universe in his TARDIS, a sentient'
 queue 'time-travelling space ship. Its exterior appears as a blue British'
 queue 'police box, which was a common sight in Britain in 1963 when the'
 queue 'series first aired. Along with a succession of companions, the'
 queue 'Doctor combats a variety of foes while working to save civilisations'
 queue 'and help people in need.'
 db.0=     queued()
 do n=1 to queued()
   parse pull r
   db.n=right(n,8,0)r
 end
 cc=RunPgm('put dd(rrds) stem(db.)',0)
 if cc<>0 then exit 20
 say rxvbinse+0 'record added to db'

 /*------------------ RRDS get   -------------------------------------*/
 call xmsg 'RRDS get all'
 cc=RunPgm('get dd(rrds) stem(lst.) ',0)
 say 'Get all rc' cc 'returned' lst.0 'records'
 Call ListLst
 if lst.0<>9 then exit xmsg('Should have been 9 records')
 drop lst.

 call xmsg 'Get #6-8'
 cc=RunPgm('get dd(rrds) stem(lst.) key(6) to(8)',0)
 say 'Get #6-8 rc' cc 'returned' lst.0 'records'
 Call ListLst
 if lst.0<>3 then exit xmsg('Should have been 3 records')
 drop lst.

 call xmsg 'Get #8,6,4,2 using list'
 parse value '4 8 6 4 2' with ks.0 ks.1 ks.2 ks.3 ks.4
 cc=RunPgm('get dd(rrds) stem(lst.) keystem(ks.)',0)
 call xmsg 'Get #8,6,4,2 rc' cc 'returned' lst.0 'records'
 Call ListLst
 if lst.0<>4 then exit xmsg('Should have been 4 records')
 say ''

 /*------------------ RRDS put   -------------------------------------*/

 drop lst. upd. new.
 upd.1= '00000002 record #2 updated'
 upd.0= 1
 call xmsg 'Upd record #2'
 cc=RunPgm('put dd(rrds) stem(upd.)',0)
 call xmsg 'Upd record #2 updated'

 call xmsg 'Add records #11, 13 and 15'
 new.1= '00000011 record #11 added'
 new.2= '00000013 record #13 added'
 new.3= '00000015 record #15 added'
 new.0= 3
 cc=RunPgm('put dd(rrds) stem(new.) ',0)
 if rxvbinse<>3 then exit xmsg('Insert value should have been 3')

 call xmsg 'Add record #16 using INSERT'
 new.1= '00000016 record #16 INSERTed'
 new.0= 1
 cc=RunPgm('insert dd(rrds) stem(new.) ',0)
 if rxvbinse<>1 then exit xmsg('Insert value should have been 1')

 cc=RunPgm('put dd(rrds) value(00000019This is inserted by value)',0)
 if rxvbinse<>1 then exit xmsg('Insert value should have been 1')

 /* list and test bypass empty slots */
 cc=RunPgm('get dd(rrds) stem(lst.) key(1) to(20)',0)
 Call ListLst
 if lst.0<>14 then exit xmsg('Should have been 14 records')
 say ''

 /*------------------ V023 - dynamic allocation ----------------------*/
 say 'V023 - dynamic allocation'
 Call Silent 'lista st','la1.'
 cc=RunPgm('get da('strip(rrdsds,"b","'")') stem(lst.) ',0)
 say 'Get all rc' cc 'returned' lst.0 'records'
 if rxvbread<>14 then call rtn 'Wrong # of records read' rxvbread+0,
   'expected 14',8
 Call Silent 'lista st','la2.'
 mm=0
 do n=0 to max(la1.0,la2.0) while mm=0
   mm=(la1.n<>la2.n)
 end
 if mm then do
   say 'Lista missmatch'
   say 'Before..'
   do n=1 to la1.0
     say la1.n
   end
   say 'Before..'
   do n=1 to la1.0
     say la1.n
   end
   Call rtn 'Failed'
 end
 say ''

 /*------------------ End ok         ---------------------------------*/
ok:
 Call Rtn 'All ok'

Rtn:
 if arg(1)<>'' then say arg(1)
 if arg(2)<>'' then maxrc=word(arg(2) maxrc,1)
 if dela='Y'   then do
   if Silent("Delete" ksdsds "cl")=0 then,
     say 'Testcl' ksdsds 'deleted'
   else  say 'Testcl' ksdsds 'delete failed'
 end
 exit xmsg('IVP ended rc' maxrc,maxrc)

RunPgm:
 say time() 'Runpgm' arg(1)
 /*
 parse upper value arg(1) with . ' STEM('s')' .
 if s<>'' then zz=Value(s'0',0)
 */
 parse upper value arg(1) with . ' LISTSTEM('s')' .
 if s<>'' then zz=Value(s'0',0)
 Interpret "cc="pgmname"('"arg(1)"')"
 call liststat
 if arg(2)='' then return cc
 if cc<>arg(2) then exit xmsg('rc' cc+0 'ne' arg(2),20)
 return cc

ListStat:
 say time() 'rc' cc 'reads' rxvbread+0,
     'writes' rxvbwrit+0 'inserts' rxvbinse+0 'updates' rxvbupdt+0,
     'deletes' rxvbdele+0 'errmsg "'space(rxvberrm)'"'
 return cc

Silent: zz=outtrap(word(arg(2) '$.',1))
        address tso arg(1);zz=outtrap('off');return rc

Xmsg: say time() arg(1);maxrc=word(arg(2) maxrc,1);return word(arg(2) 0,1)

SayError:
 say 'Error' arg(1)
 cc=RexxGblv('rlist var(rxvb*)')
 return 0

ListDb:
 if arg(1)<>'' then say arg(1)
 Interpret "cc="pgmname"('get dd(ksds) stem(lst.)')"
 if cc<>0 then exit xmsg('listdb rc' cc,99)
 say cols80
 listdbn=lst.0
 Call ListLst 'Database list.....'
 say cols80
 return 0

DBinfo:
 call xmsg 'DB info for DD' arg(1)
 cc=RxVsamBa('info dd('arg(1)')')
 say 'keylen ' RXVBkeyl
 say 'keypos ' RXVBkeyp
 say 'lrecl  ' RXVBrecl
 say 'dbtype ' RXVBdbty
 return 0

ListLst:
 if arg(1)<>'' then say arg(1)
 if datatype(lst.0)<>'NUM' then exit ('Bad list',20)
 say lst.0 'records in list'
 if datatype(lst.0)<>'NUM' | lst.0>200 then exit xmsg('*count error',20)
 say '        'cols100
 do n=1 to lst.0
   say right(n,3,0) right(length(lst.n),3,0) lst.n
 end
 return 0

ListStack:
 do queued()
   parse pull r
   say r
 end
 return 0

MakeKSDS:
 arg p
 cc=Silent("Free dd(ksds)")
 cc=Silent("DELETE" ksdsds "cl")
 "DEFINE CLUSTER(NAME("ksdsds") VOLUME("testvol")",
 "TRACKS(3 3) KEYS("dbkeylen "0) RECORDSIZE(60 200) )",
 "DATA(CISZ(4196))"
 if rc<>0 then do
   say 'Define failed rc' rc,20
   exit 20
 end
 "alloc dd(ksds) da("ksdsds") shr"
 if rc<>0 then exit xmsg('Alloc test db failed' rc)
 say  'Test cluster allocated to fileref KSDS'

 Call MakeTestData
 datan=data.0
 trace off
 wr#=1
 /*
 data.0=2
 cc=RxVsamBA('put dd(ksds) stem(data.)')
 if cc<>0 then exit xmsg('Write' wr# 'failed rc' cc,20)
 call liststat
 data.0=datan
 wr#=2
 */
 cc=RxVsamBA('put dd(ksds) stem(data.)')
 if cc<>0 then exit xmsg('Write' wr# 'failed rc' cc RXVBERRM,20)
 trace off
 call liststat
 drop data.
 return 0
 if p<>'SILENT' then say qn 'records written to db'
 return 0

TestDataSrc:
 "delstack"
 queue cols40
 queue 'AUTO.L0AD                         ZXSYS2 PO         U         0 23200'
 queue 'AXR.EXEC                          ZXSYS2 PO         VB      255 27998'
 queue 'CBT.CNTL                          ZXSYS2 PO         FB       80 27920'
 queue 'CBT.OBJ                           ZXSYS2 PO         FB       80  3040'
 queue 'DOCL1B                            ZXSYS2 PO-E VB            200 32760'
 queue 'EXEC.XMIT                         ZXSYS1                             '
 queue 'ICFCAT.BACKUPS            '
 queue 'ISPF.CNTL                         ZXSYS2 PO         VB     1024 27998'
 queue 'ISPF34.L1B                '
 queue 'ISPLL1B                           ZXSYS2 PO         U     27920 27920'
 queue 'ISPML1B                   '
 queue 'ISPPL1B.XMIT                      ZXSYS1                             '
 queue 'JOBL1B.DATA                       ZXSYS2 PO         FB       80  9040'
 queue 'LOCMBR.CNTL                       ZXSYS2 PO         FB       80 27920'
 queue 'LOCMBR.L0AD                       ZXSYS2 PO         U         0 23200'
 queue 'L1NKL1B                           ZXSYS2 PO         U     27998 32756'
 queue 'MIGRTOOL.ZFS.JOB          '
 queue 'MIGRTOOL.ZFS.L0AD                 ZXSYS1                             '
 queue 'MODEL.CNTL.L1B                    ZXSYS2 PO         FB       80  4080'
 queue 'MODEL.L1B                         ZXSYS2 PO         FB       80  4080'
 queue 'MPF.CNTL                  '
 queue 'MSGX.L1NKL1B                      ZXSYS2 PO         U         0 32756'
 queue 'MSGX3.L0AD.OLD            '
 queue 'PDSXLOAD                  '
 queue 'PKG0002.DATA                      ZXSYS2 PO         FB       80  3120'
 queue 'PRD.L0AD                  '
 queue 'PROFICS.VSAVE                     ZXSYS1 PS         VB    23400 27998'
 queue 'SYSREXX.EXEC                      ZXSYS2 PO         VB      255 27998'
 queue 'TOOLBOX.L1B                       ZXSYS2 PO         FB       80 27920'
 queue 'TOOLBOX.L1B.OLD                   ZXSYS2 PO         FB       80 27920'
 queue 'TOOLBOX.SMALLSMS.CNTL             ZXSYS2 PO         FB       80 27920'
 queue 'WFM.L1B                   '
 queue 'WFM3.L1B                          ZXSYS2 PO         FB       80 27920'
 queue 'WLM.SYSDISK.DATEFILE              ZXSYS1 PS         FB      200 27800'
 queue 'WLM.USERDISK.DATEFILE             ZXSYS1 PS         FB      200 27800'
 queue 'WSA4.CKPT                         ZXSYS2 PS         FB    27900 27900'
 queue 'WSA4.MENU                         ZXSYS2 PO-E VB            150 32760'
 queue 'WSA4.MENU.OLD                     ZXSYS2 PO-E VB            250 32760'
 queue 'WSA4.PROC                         ZXSYS2 PO-E VB            150 32720'
 queue 'ZAUTO.EXEC                        ZXSYS2 PO         FB       80 27920'
 queue 'ZBOX.L1B                          ZXSYS2 PO         FB       80 27920'
 queue 'ZCBT.JCLL1B                       ZXSYS2 PO-E FB             80  6160'
 queue 'ZCBT.L0ADL1B                      ZXSYS2 PO         U         0 32760'
 queue 'Z113.VTAMLST                      ZXSYS2 PO         FB       80 27920'
 return

MakeTestData:
 Call TestDataSrc
 cols=cols100 || cols100
 n=0
 do m=1 to 30 by 2
   n=n+1
   queue right(n,25,0)left(cols,m*2)
 end
 data.0=queued()
 do n=1 to data.0
   parse pull r
   data.n=r
 end
 return 0
